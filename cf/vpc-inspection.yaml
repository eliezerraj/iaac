AWSTemplateFormatVersion: "2010-09-09"
Description: VPC create Template

Parameters:
  VPCCIDR:
    Type: "String"
    Description: "IP Address range for the VPC"
    MinLength: "9"
    MaxLength: "18"
    Default: "100.0.0.0/18"
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: "must be a valid IP CIDR range of the form x.x.x.x/x."
    
  PRIVACIDR:
    Type: "String"
    Description: "IP Address range for subnet-priv-A Subnet"
    MinLength: "9"
    MaxLength: "18"
    Default: "100.0.0.0/23"
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: "must be a valid IP CIDR range of the form x.x.x.x/x."
  PUBACIDR:
    Type: "String"
    Description: "IP Address range for subnet-pub-A Subnet"
    MinLength: "9"
    MaxLength: "18"
    Default: "100.0.2.0/23"
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: "must be a valid IP CIDR range of the form x.x.x.x/x."
  RESTRACIDR:
    Type: "String"
    Description: "IP Address range for subnet-rest-A Subnet"
    MinLength: "9"
    MaxLength: "18"
    Default: "100.0.4.0/23"
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: "must be a valid IP CIDR range of the form x.x.x.x/x."
  ATTACIDR:
    Type: "String"
    Description: "IP Address range for subnet-attach-A Subnet"
    MinLength: "9"
    MaxLength: "18"
    Default: "100.0.6.0/23"
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: "must be a valid IP CIDR range of the form x.x.x.x/x."

  PRIVBCIDR:
    Type: "String"
    Description: "IP Address range for subnet-priv-B Subnet"
    MinLength: "9"
    MaxLength: "18"
    Default: "100.0.8.0/23"
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: "must be a valid IP CIDR range of the form x.x.x.x/x."
  PUBBCIDR:
    Type: "String"
    Description: "IP Address range for subnet-pub-B Subnet"
    MinLength: "9"
    MaxLength: "18"
    Default: "100.0.10.0/23"
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: "must be a valid IP CIDR range of the form x.x.x.x/x."
  RESTRBCIDR:
    Type: "String"
    Description: "IP Address range for subnet-rest-B Subnet"
    MinLength: "9"
    MaxLength: "18"
    Default: "100.0.12.0/23"
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: "must be a valid IP CIDR range of the form x.x.x.x/x."
  ATTBCIDR:
    Type: "String"
    Description: "IP Address range for subnet-attach-B Subnet"
    MinLength: "9"
    MaxLength: "18"
    Default: "100.0.14.0/23"
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: "must be a valid IP CIDR range of the form x.x.x.x/x."

  PRIVCCIDR:
    Type: "String"
    Description: "IP Address range for subnet-priv-C Subnet"
    MinLength: "9"
    MaxLength: "18"
    Default: "100.0.16.0/23"
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: "must be a valid IP CIDR range of the form x.x.x.x/x."
  PUBCCIDR:
    Type: "String"
    Description: "IP Address range for subnet-pub-C Subnet"
    MinLength: "9"
    MaxLength: "18"
    Default: "100.0.18.0/23	"
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: "must be a valid IP CIDR range of the form x.x.x.x/x."
  RESTRCCIDR:
    Type: "String"
    Description: "IP Address range for subnet-rest-C Subnet"
    MinLength: "9"
    MaxLength: "18"
    Default: "100.0.20.0/23"
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: "must be a valid IP CIDR range of the form x.x.x.x/x."
  ATTCCIDR:
    Type: "String"
    Description: "IP Address range for subnet-attach-C Subnet"
    MinLength: "9"
    MaxLength: "18"
    Default: "100.0.22.0/23"
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: "must be a valid IP CIDR range of the form x.x.x.x/x."
  
  PublicIPv4Subnets:
    Type: "String"
    Description: "Create Public IPv4 Subnets?"
    AllowedValues:
      - true
      - false
    Default: true 
  EnableIPv6:
    Type: "String"
    Description: "Enable IPv6 on the VPC and subnets"
    AllowedValues:
      - true
      - false
    Default: false

Conditions:
  EnableIPv6: !Equals
    - !Ref EnableIPv6
    - true
  DisableIPv6: !Equals
    - !Ref EnableIPv6
    - false
  PublicIPv4: !Equals
    - !Ref PublicIPv4Subnets
    - true
  PublicIPv4orIPv6: !Or
    - !Equals [!Ref EnableIPv6, true]
    - Condition: PublicIPv4

Resources:
  VPC:
    Type: "AWS::EC2::VPC"
    Properties:
      EnableDnsSupport: true
      EnableDnsHostnames: true
      CidrBlock: !Ref VPCCIDR
      Tags:
        - Key: "Name"
          Value: !Sub "${AWS::StackName}"
  IPv6CidrBlock:
    Type: AWS::EC2::VPCCidrBlock
    Properties:
      VpcId: !Ref VPC
      AmazonProvidedIpv6CidrBlock: true
  IGW:
    Type: AWS::EC2::InternetGateway
    Condition: PublicIPv4orIPv6
    Properties:
      Tags:
      - Key: "Name"
        Value: !Sub "${AWS::StackName}-igw"
  IGWAttachments:
    Type: AWS::EC2::VPCGatewayAttachment
    Condition: PublicIPv4orIPv6
    Properties:
      InternetGatewayId: !Ref IGW
      VpcId: !Ref VPC

  SubnetPrivA:
    Type: AWS::EC2::Subnet
    DependsOn: IPv6CidrBlock
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !Ref PRIVACIDR
      AssignIpv6AddressOnCreation: !If [EnableIPv6, true, !Ref AWS::NoValue]
      Ipv6CidrBlock:
        Fn::If:
          - EnableIPv6          
          - !Select [ 2, !Cidr [ !Select [ 0, !GetAtt VPC.Ipv6CidrBlocks], 16, 64 ]]
          - !Ref AWS::NoValue
      Tags:
        - Key: Name
          Value: !Sub "sub-${AWS::StackName}-priv-a"
  SubnetPubA:
    Type: AWS::EC2::Subnet
    DependsOn: IPv6CidrBlock
    Properties:
      VpcId: !Ref VPC
      MapPublicIpOnLaunch: !If [PublicIPv4, true, false]
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !Ref PUBACIDR
      Ipv6CidrBlock:
        Fn::If:
          - EnableIPv6          
          - !Select [ 3, !Cidr [ !Select [ 0, !GetAtt VPC.Ipv6CidrBlocks], 16, 64 ]]
          - !Ref AWS::NoValue
      Tags:
        - Key: Name
          Value: !Sub "sub-${AWS::StackName}-pub-a"
  SubnetRestA:
    Type: AWS::EC2::Subnet
    DependsOn: IPv6CidrBlock
    Properties:
      VpcId: !Ref VPC
      MapPublicIpOnLaunch: !If [PublicIPv4, true, false]
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !Ref RESTRACIDR
      Ipv6CidrBlock:
        Fn::If:
          - EnableIPv6          
          - !Select [ 3, !Cidr [ !Select [ 0, !GetAtt VPC.Ipv6CidrBlocks], 16, 64 ]]
          - !Ref AWS::NoValue
      Tags:
        - Key: Name
          Value: !Sub "sub-${AWS::StackName}-insp-a"
  SubnetAttA:
    Type: AWS::EC2::Subnet
    DependsOn: IPv6CidrBlock
    Properties:
      VpcId: !Ref VPC
      MapPublicIpOnLaunch: !If [PublicIPv4, true, false]
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !Ref ATTACIDR
      Ipv6CidrBlock:
        Fn::If:
          - EnableIPv6          
          - !Select [ 3, !Cidr [ !Select [ 0, !GetAtt VPC.Ipv6CidrBlocks], 16, 64 ]]
          - !Ref AWS::NoValue
      Tags:
        - Key: Name
          Value: !Sub "sub-${AWS::StackName}-att-a"
  
  RTPRIVA:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Sub "${AWS::StackName}-rt-priv-A"
  RTPUBA:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Sub "${AWS::StackName}-rt-pub-A"
  RTRESTA:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Sub "${AWS::StackName}-rt-insp-A"
  RTATTA:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Sub "${AWS::StackName}-rt-att-A"
 
  DefaultRouteIPv4PUBA:
    Type : AWS::EC2::Route
    DependsOn:
      - IGW
      - IGWAttachments
    Condition: PublicIPv4
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref IGW
      RouteTableId: !Ref RTPUBA
  RTAssociationPRIVA:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref SubnetPrivA
      RouteTableId: !Ref RTPRIVA
  RTAssociationPUBA:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref SubnetPubA
      RouteTableId: !Ref RTPUBA
  RTAssociationRESTRA:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref SubnetRestA
      RouteTableId: !Ref RTRESTA
  RTAssociationAttA:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref SubnetAttA
      RouteTableId: !Ref RTATTA

  NetworkAclPublic:
    Type: 'AWS::EC2::NetworkAcl'
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Sub "nacl-vpc-${AWS::StackName}-public"
  NACLPubAllowAllIPv4In:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAclPublic
      RuleNumber: 100
      Protocol: -1
      RuleAction: allow
      Egress: false
      CidrBlock: '0.0.0.0/0'
  NACLPubAllowAllIPv4Out:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAclPublic
      RuleNumber: 100
      Protocol: -1
      RuleAction: allow
      Egress: true
      CidrBlock: '0.0.0.0/0'
  SubnetNetworkAclAssociationPubA:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      SubnetId: !Ref SubnetPubA
      NetworkAclId: !Ref NetworkAclPublic

  NetworkAclPrivate:
    Type: 'AWS::EC2::NetworkAcl'
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Sub "nacl-vpc-${AWS::StackName}-private"
  NACLPrivAllowAllIPv4In:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAclPrivate
      RuleNumber: 100
      Protocol: -1
      RuleAction: allow
      Egress: false
      CidrBlock: !Ref PUBACIDR
  NACLPrivAllowAllIPv4Out:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAclPrivate
      RuleNumber: 100
      Protocol: -1
      RuleAction: allow
      Egress: true
      CidrBlock: '0.0.0.0/0'
  SubnetNetworkAclAssociationPrivA:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      SubnetId: !Ref SubnetPrivA
      NetworkAclId: !Ref NetworkAclPrivate

  NetworkAclRestrict:
    Type: 'AWS::EC2::NetworkAcl'
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Sub "nacl-vpc-${AWS::StackName}-inspect"
  NACLRestrAllowAllIPv4In:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAclRestrict
      RuleNumber: 100
      Protocol: -1
      RuleAction: allow
      Egress: false
      CidrBlock: !Ref PRIVACIDR
  NACLRestrAllowAllIPv4Out:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAclRestrict
      RuleNumber: 100
      Protocol: -1
      RuleAction: allow
      Egress: true
      CidrBlock: '0.0.0.0/0'
  SubnetNetworkAclAssociationRestrA:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      SubnetId: !Ref SubnetRestA
      NetworkAclId: !Ref NetworkAclRestrict

  NetworkAclAtt:
    Type: 'AWS::EC2::NetworkAcl'
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Sub "nacl-vpc-${AWS::StackName}-att"
  NACLAttAllowAllIPv4In:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAclAtt
      RuleNumber: 100
      Protocol: -1
      RuleAction: allow
      Egress: false
      CidrBlock: '0.0.0.0/0'
  NACLAttAllowAllIPv4Out:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAclAtt
      RuleNumber: 100
      Protocol: -1
      RuleAction: allow
      Egress: true
      CidrBlock: '0.0.0.0/0'
  SubnetNetworkAclAssociationAttA:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      SubnetId: !Ref SubnetAttA
      NetworkAclId: !Ref NetworkAclAtt

# ---------------------------------------

  SubnetPrivB:
    Type: AWS::EC2::Subnet
    DependsOn: IPv6CidrBlock
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !Ref PRIVBCIDR
      AssignIpv6AddressOnCreation: !If [EnableIPv6, true, !Ref AWS::NoValue]
      Ipv6CidrBlock:
        Fn::If:
          - EnableIPv6          
          - !Select [ 2, !Cidr [ !Select [ 0, !GetAtt VPC.Ipv6CidrBlocks], 16, 64 ]]
          - !Ref AWS::NoValue
      Tags:
        - Key: Name
          Value: !Sub "sub-${AWS::StackName}-priv-b"
  SubnetPubB:
    Type: AWS::EC2::Subnet
    DependsOn: IPv6CidrBlock
    Properties:
      VpcId: !Ref VPC
      MapPublicIpOnLaunch: !If [PublicIPv4, true, false]
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !Ref PUBBCIDR
      Ipv6CidrBlock:
        Fn::If:
          - EnableIPv6          
          - !Select [ 3, !Cidr [ !Select [ 0, !GetAtt VPC.Ipv6CidrBlocks], 16, 64 ]]
          - !Ref AWS::NoValue
      Tags:
        - Key: Name
          Value: !Sub "sub-${AWS::StackName}-pub-b"
  SubnetRestB:
    Type: AWS::EC2::Subnet
    DependsOn: IPv6CidrBlock
    Properties:
      VpcId: !Ref VPC
      MapPublicIpOnLaunch: !If [PublicIPv4, true, false]
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !Ref RESTRBCIDR
      Ipv6CidrBlock:
        Fn::If:
          - EnableIPv6          
          - !Select [ 3, !Cidr [ !Select [ 0, !GetAtt VPC.Ipv6CidrBlocks], 16, 64 ]]
          - !Ref AWS::NoValue
      Tags:
        - Key: Name
          Value: !Sub "sub-${AWS::StackName}-insp-b"
  SubnetAttB:
    Type: AWS::EC2::Subnet
    DependsOn: IPv6CidrBlock
    Properties:
      VpcId: !Ref VPC
      MapPublicIpOnLaunch: !If [PublicIPv4, true, false]
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !Ref ATTBCIDR
      Ipv6CidrBlock:
        Fn::If:
          - EnableIPv6          
          - !Select [ 3, !Cidr [ !Select [ 0, !GetAtt VPC.Ipv6CidrBlocks], 16, 64 ]]
          - !Ref AWS::NoValue
      Tags:
        - Key: Name
          Value: !Sub "sub-${AWS::StackName}-att-b"

  RTAssociationPRIVB:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref SubnetPrivB
      RouteTableId: !Ref RTPRIVA
  RTAssociationPUBB:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref SubnetPubB
      RouteTableId: !Ref RTPUBA
  RTAssociationRESTRB:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref SubnetRestB
      RouteTableId: !Ref RTRESTA
  RTAssociationAttB:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref SubnetAttB
      RouteTableId: !Ref RTATTA

  SubnetNetworkAclAssociationPubB:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      SubnetId: !Ref SubnetPubB
      NetworkAclId: !Ref NetworkAclPublic
  SubnetNetworkAclAssociationPrivB:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      SubnetId: !Ref SubnetPrivB
      NetworkAclId: !Ref NetworkAclPrivate
  SubnetNetworkAclAssociationRestrB:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      SubnetId: !Ref SubnetRestB
      NetworkAclId: !Ref NetworkAclRestrict
  SubnetNetworkAclAssociationAttB:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      SubnetId: !Ref SubnetAttB
      NetworkAclId: !Ref NetworkAclAtt

# ---------------------------------

  SubnetPrivC:
      Type: AWS::EC2::Subnet
      DependsOn: IPv6CidrBlock
      Properties:
        VpcId: !Ref VPC
        AvailabilityZone: !Select [ 0, !GetAZs '' ]
        CidrBlock: !Ref PRIVCCIDR
        AssignIpv6AddressOnCreation: !If [EnableIPv6, true, !Ref AWS::NoValue]
        Ipv6CidrBlock:
          Fn::If:
            - EnableIPv6          
            - !Select [ 2, !Cidr [ !Select [ 0, !GetAtt VPC.Ipv6CidrBlocks], 16, 64 ]]
            - !Ref AWS::NoValue
        Tags:
          - Key: Name
            Value: !Sub "sub-${AWS::StackName}-priv-c"
  SubnetPubC:
    Type: AWS::EC2::Subnet
    DependsOn: IPv6CidrBlock
    Properties:
      VpcId: !Ref VPC
      MapPublicIpOnLaunch: !If [PublicIPv4, true, false]
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !Ref PUBCCIDR
      Ipv6CidrBlock:
        Fn::If:
          - EnableIPv6          
          - !Select [ 3, !Cidr [ !Select [ 0, !GetAtt VPC.Ipv6CidrBlocks], 16, 64 ]]
          - !Ref AWS::NoValue
      Tags:
        - Key: Name
          Value: !Sub "sub-${AWS::StackName}-pub-c"
  SubnetRestC:
    Type: AWS::EC2::Subnet
    DependsOn: IPv6CidrBlock
    Properties:
      VpcId: !Ref VPC
      MapPublicIpOnLaunch: !If [PublicIPv4, true, false]
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !Ref RESTRCCIDR
      Ipv6CidrBlock:
        Fn::If:
          - EnableIPv6          
          - !Select [ 3, !Cidr [ !Select [ 0, !GetAtt VPC.Ipv6CidrBlocks], 16, 64 ]]
          - !Ref AWS::NoValue
      Tags:
        - Key: Name
          Value: !Sub "sub-${AWS::StackName}-insp-c"
  SubnetAttC:
    Type: AWS::EC2::Subnet
    DependsOn: IPv6CidrBlock
    Properties:
      VpcId: !Ref VPC
      MapPublicIpOnLaunch: !If [PublicIPv4, true, false]
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !Ref ATTCCIDR
      Ipv6CidrBlock:
        Fn::If:
          - EnableIPv6          
          - !Select [ 3, !Cidr [ !Select [ 0, !GetAtt VPC.Ipv6CidrBlocks], 16, 64 ]]
          - !Ref AWS::NoValue
      Tags:
        - Key: Name
          Value: !Sub "sub-${AWS::StackName}-att-c"

  RTAssociationPRIVC:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref SubnetPrivC
      RouteTableId: !Ref RTPRIVA
  RTAssociationPUBC:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref SubnetPubC
      RouteTableId: !Ref RTPUBA
  RTAssociationRESTRC:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref SubnetRestC
      RouteTableId: !Ref RTRESTA
  RTAssociationAttC:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref SubnetAttC
      RouteTableId: !Ref RTATTA

  SubnetNetworkAclAssociationPubC:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      SubnetId: !Ref SubnetPubC
      NetworkAclId: !Ref NetworkAclPublic
  SubnetNetworkAclAssociationPrivC:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      SubnetId: !Ref SubnetPrivC
      NetworkAclId: !Ref NetworkAclPrivate
  SubnetNetworkAclAssociationRestrC:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      SubnetId: !Ref SubnetRestC
      NetworkAclId: !Ref NetworkAclRestrict
  SubnetNetworkAclAssociationAttC:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      SubnetId: !Ref SubnetAttC
      NetworkAclId: !Ref NetworkAclAtt