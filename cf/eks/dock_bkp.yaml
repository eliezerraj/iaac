AWSTemplateFormatVersion: "2010-09-09"
Description: Template para criação dos nodes do EKS (nodegroup ou fargate).

Parameters:
  Env:
    Type: String
    Description: Please specify the Environment. Used for tagging
    AllowedValues:
      - dev
      - qa
      - hml
      - prd     
  ClusterStackName:
    Type: String
    Description: Get the CloudFormation Stack Name of EKS Cluster
  NodeGroupMinNodes:
    Type: Number
    Description: Minimum size of Node Group ASG
    Default: 1
  NodeGroupMaxNodes:
    Type: Number
    Description: Maximum size of Node Group ASG. Set to at least 1 greater than NodeAutoScalingGroupDesiredCapacity
    Default: 3
  NodeGroupDesiredNodes:
    Type: Number
    Description: Desired size of Node Group ASG
    Default: 1
  CidrIp:
    Type: String
    Description: Please specify CIDR Block of VPC
  VpcId:
    Type: String
    Description: Please specify VPC ID of AWS Account
  SubnetIds:
     Type: 'List<AWS::EC2::Subnet::Id>'
     Description: Please specify List the Subnets  
  NodegroupName:
    Type: String
    Description: Please specify the name of NodeGroup       
  ImageId:
    Type: AWS::EC2::Image::Id
    Description: AMI instance ID
  InstanceType:
    Type: String
    Description: Instance type
    Default: t3.medium
  KeyPairName:
   Type: AWS::EC2::KeyPair::KeyName
   Description: The EC2 Key Pair to allow SSH access to the instances
  ClusterCertificateAuthorityData:
    Type: String
    Description: The CA of EKS Cluster
  VolumeSize:
    Type: String
    Default: 30 
    Description: The volume disk size in GB of EBS to Worker Nodes
  startHour:
    Type: Number
    MinValue: 0
    MaxValue: 23
    Default: 7
    Description: The hour that the autoscaling start EC2
  stopHour:
    Type: Number
    MinValue: 0
    MaxValue: 23
    Default: 19
    Description: The hour that the autoscaling stop EC2
  Application:
    Description:    Please specify the Application. Used for tagging 
    Type:           String
  BusinessUnitName:
    Description:    Please specify the Business Unit Name. Used for tagging  
    Type:           String
  CloudProvider:
    Description:    Please specify the Cloud Provider. Used for tagging
    Type:           String
    Default: aws
    AllowedValues:
      - aws
      - azure
      - gcp
  Component:
    Description:    Please specify the Component. Used for tagging
    Type:           String
  Owner:
    Description:    Please specify the Owner. Used for tagging  
    Type:           String   
  PCIClassification:
    Description:    Please specify the PCI Classification of environment. Used for tagging  
    Type:           String
    Default: non-pci
    AllowedValues:
      - pci
      - pci-connected
      - non-pci    
  PCIScope:
    Description:    Please specify if this environment is PCI Scope or not. Used for tagging  
    Type:           String
    Default: false
    AllowedValues:
      - false
      - true
  Platform:
    Description:    Please specify the Platform. Used for tagging
    Type:           String  
  Squad:
    Description:    Please specify the Squad. Used for tagging
    Type:           String 
  Email:
    Description:    Please specify the Email. Used for tagging
    Type:           String 
  Slack:
    Description:    Please specify the Slack. Used for tagging
    Type:           String 
  Service:
    Description:    Please specify the Service. Used for tagging
    Type:           String     
  TaintKey:
    Type: String
    Description: the taint key
    Default: "false"
  TaintValue:
    Type: String
    Description: the taint value
    Default: "false" 
  TaintEffect:
    Type: String
    Description: the taint Effect
    Default: "PREFER_NO_SCHEDULE"
  CISBootstrapImage:
    Type: String
    Description: "The Image to CIS bootstrap - PCI Compliance - Bottlerocket"
    Default: "111066175892.dkr.ecr.us-east-2.amazonaws.com/bottlerocket-cis-bootstrap:bootstrap"

Conditions:
  isDev: !Equals [ !Ref Env, dev ]
  taintkey: !Not
    - !Equals
      - !Ref TaintKey
      - "false"

Resources:
  NodeLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateData:
        MetadataOptions:
          HttpTokens: required 
        BlockDeviceMappings:
          - DeviceName: /dev/xvda
            Ebs:
              DeleteOnTermination: true
              VolumeSize: !Ref VolumeSize
              VolumeType: gp2
        ImageId: !Ref ImageId
        InstanceType: !Ref InstanceType
        KeyName: !Ref KeyPairName
        NetworkInterfaces:
          - AssociatePublicIpAddress: false
            DeviceIndex: 0
            Groups:
              - !Ref sgWorkerNodes
              - Fn::ImportValue:
                  !Sub "${ClusterStackName}-ClusterSecurityGroupId-${Env}"
        UserData:     
          Fn::Base64: !Sub
            - |
              [settings.kubernetes]
              api-server = "${ClusterEndpoint}"
              cluster-certificate = "${ClusterCertificateAuthorityData}"
              cluster-name = "${ClusterName}"
              
              [settings.bootstrap-containers.cis-bootstrap]
              source = "${CISBootstrapImage}"
              mode = "always"
              essential = true

              [settings.kernel.sysctl]
              # 3.1.1
              "net.ipv4.conf.all.send_redirects" = "0"
              "net.ipv4.conf.default.send_redirects" = "0"
              
              # 3.2.2
              "net.ipv4.conf.all.accept_redirects" = "0"
              "net.ipv4.conf.default.accept_redirects" = "0"
              "net.ipv6.conf.all.accept_redirects" = "0"
              "net.ipv6.conf.default.accept_redirects" = "0"
              
              # 3.2.3
              "net.ipv4.conf.all.secure_redirects" = "0"
              "net.ipv4.conf.default.secure_redirects" = "0"
              
              # 3.2.4
              "net.ipv4.conf.all.log_martians" = "1"
              "net.ipv4.conf.default.log_martians" = "1"
            - ClusterEndpoint:
                Fn::ImportValue: 
                  !Sub ${ClusterStackName}-ClusterEndpoint-${Env}
              ClusterName:
                Fn::ImportValue: 
                  !Sub ${ClusterStackName}-ClusterName-${Env}
              CISBootstrapImage: !Ref CISBootstrapImage
        TagSpecifications:
          - ResourceType: instance
            Tags:
              - Key: Name
                Value: !Sub ${ClusterStackName}-${Env}
          - ResourceType: volume
            Tags:
              - Key: Name
                Value: !Sub ${ClusterStackName}-${Env}                    

  EKSNodeGroup:
    Type: AWS::EKS::Nodegroup
    Properties:
      ClusterName: 
        Fn::ImportValue: !Sub ${ClusterStackName}-ClusterName-${Env}
      NodeRole: !GetAtt RoleNodeInstance.Arn
      NodegroupName: !Ref NodegroupName      
      LaunchTemplate:
        Id: !Ref NodeLaunchTemplate
        Version: !GetAtt NodeLaunchTemplate.LatestVersionNumber
      Labels:
        Key: Name
        PropagateAtLaunch: true
        Nodegroup-image: !Ref ImageId
      ScalingConfig:
        MinSize: !Ref NodeGroupMinNodes
        DesiredSize: !Ref NodeGroupDesiredNodes
        MaxSize: !Ref NodeGroupMaxNodes
      Subnets: !Ref SubnetIds
      Taints:
      - Fn::If:
        - taintkey
        - 
          Effect: !Ref TaintEffect
          Key: !Ref TaintKey
          Value: !Ref TaintValue
        - Ref: AWS::NoValue
      Tags:
        application: !Ref Application
        business_unit: !Ref BusinessUnitName
        cloud_provider: !Ref CloudProvider
        component: !Ref Component
        email: !Ref Email
        env: !Ref Env
        owner: !Ref Owner
        pci_classification: !Ref PCIClassification
        pci_scope: !Ref PCIScope
        platform: !Ref Platform
        service: !Ref Service      
        slack: !Ref Slack
        squad: !Ref Squad
        stack: !Sub ${AWS::StackName}
       
  sgWorkerNodes:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow SSH access
      SecurityGroupIngress:  
      - CidrIp: !Ref CidrIp
        FromPort: 0
        ToPort: 65535
        IpProtocol: 'tcp'
        Description: "Allow access to Local VPC"  
      - CidrIp: 10.255.128.0/19
        FromPort: 0
        ToPort: 65535
        IpProtocol: 'tcp'
        Description: "Allow access to Prisma VPN"
      SecurityGroupEgress:
        - Description: Deny outbound traffic
          IpProtocol: '-1'
          CidrIp: 127.0.0.0/32        
      Tags:
      - Key: Name
        Value:
          Fn::Sub: "${AWS::StackName}/SSH"
      VpcId: !Ref VpcId

  ScheduledActionOut: 
    Condition: isDev
    Type: AWS::AutoScaling::ScheduledAction
    Properties:
      AutoScalingGroupName: !Sub
        - eks-${NodegroupName}-${Id}
        - Id:
            !Select [3, !Split ["/", !GetAtt EKSNodeGroup.Arn]]
      MinSize: !Ref NodeGroupMinNodes
      MaxSize: !Ref NodeGroupMaxNodes
      Recurrence: !Sub 0 ${startHour} * * *
      TimeZone: America/Sao_Paulo
  ScheduledActionIn: 
    Condition: isDev
    Type: AWS::AutoScaling::ScheduledAction
    Properties:
      AutoScalingGroupName: !Sub
        - eks-${NodegroupName}-${Id}
        - Id:
            !Select [3, !Split ["/", !GetAtt EKSNodeGroup.Arn]]
      MaxSize: 0
      MinSize: 0
      Recurrence: !Sub 0 ${stopHour} * * *
      TimeZone: America/Sao_Paulo

  RoleNodeInstance:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
          - arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM
          - arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy
          - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
          - arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy
      Path: /
      Tags: 
        - Key:    application 
          Value:  !Sub '${Application}'
        - Key:    business_unit
          Value:  !Sub '${BusinessUnitName}'
        - Key:    cloud_provider
          Value:  !Sub '${CloudProvider}'
        - Key:    component
          Value:  !Sub '${Component}'
        - Key:    env
          Value:  !Sub '${Env}'
        - Key:    owner
          Value:  !Sub '${Owner}'
        - Key:    pci_classification
          Value:  !Sub '${PCIClassification}'
        - Key:    pci_scope
          Value:  !Sub '${PCIScope}'
        - Key:    platform
          Value:  !Sub '${Platform}'
        - Key:    squad
          Value:  !Sub '${Squad}'
        - Key:    email
          Value:  !Sub '${Email}'
        - Key:    slack
          Value:  !Sub '${Slack}'
        - Key:    service
          Value:  !Sub '${Service}'
        - Key:    stack
          Value:  !Sub '${AWS::StackName}'
        - Key:    resource
          Value:  role      

  NodeInstanceProfile:
    Type: "AWS::IAM::InstanceProfile"
    Properties:
      Path: /
      Roles:
        - Ref: RoleNodeInstance