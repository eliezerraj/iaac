AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Criacao de API Gateway para redirect dos produtos Redhorn
Parameters:
  Versao:
    Type: String
  Env:
    Description: stack environment
    Type: String
    Default: dev
  CustomAccessLogFormatParameter:
    Type: AWS::SSM::Parameter::Value<String>
    Default: CustomAccessLogFormat
  SleipnirAPIPrivateId:
    Type: String
  AccountsServicesAPIPrivateId:
    Type: String
  ProductsAPIPrivateId:
    Type: String
  CardsAPIPrivateId:
    Type: String
  DrachmaAPIPrivateId:
    Type: String
  DocknitoAccount:
    Type: String
  DocknitoRegion:
    Type: String
  EmbossingAPIPrivateId:
    Type: String
  PersonAPIPrivateId:
    Type: String
  AbuAPIPrivateId:
    Type: String
  VPCEndpointDNS:
    Type: String
  WafaclArn:
    Type: AWS::SSM::Parameter::Value<String>
    Description: Association WAF in API ApiGateway
    Default: wafarn-aclbasic
Mappings:
  Network:
    dev:
      DomainName: api.global.dev.caradhras.io
      EdgeCertificateArn: arn:aws:acm:us-east-1:020341112536:certificate/ea48afdd-adf8-4ddb-8053-ac79f54a0f52
      HostedZoneId: Z032031337N3G0ZYNJ75U
    qa:
      DomainName: api.global.qa.caradhras.io
      EdgeCertificateArn: arn:aws:acm:us-east-1:651340054220:certificate/553e3c32-53f6-424e-910c-4a0ca03d1f5c
      HostedZoneId: Z09309203HZIUY3UTBET9
    hml:
      DomainName: api.global.hml.caradhras.io
      EdgeCertificateArn: arn:aws:acm:us-east-1:741839358494:certificate/4bd2f72e-c930-4e86-831a-b8b461f685a8
      HostedZoneId: Z08039221XDE7LC2PPTPN
    prd:
      DomainName: api.global.caradhras.io
      EdgeCertificateArn: arn:aws:acm:us-east-1:124825368467:certificate/b1ce0c1d-e64a-4417-85b8-8aa8f6c1a9de
      HostedZoneId: Z031995627X8HVL7HQDZZ
  Tag:
    Service:
      value: global-api
    Squad:
      value: sre-banking
    Slack:
      value: sre-huddle
    Email:
      value: sre-banking
    CustomDomainTemplate:
      value: 2.0.0
Resources:
  AccessLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /dock/apigateway/global-redirect-api
      Tags:
      - Key: env
        Value:
          Ref: Env
      - Key: service
        Value:
          Fn::FindInMap:
          - Tag
          - Service
          - value
      - Key: stack
        Value:
          Fn::Sub: ${AWS::StackName}
      - Key: squad
        Value:
          Fn::FindInMap:
          - Tag
          - Squad
          - value
      - Key: slack
        Value:
          Fn::FindInMap:
          - Tag
          - Slack
          - value
      - Key: email
        Value:
          Fn::FindInMap:
          - Tag
          - Email
          - value
      - Key: resource
        Value: log-group
  WafAssociation:
    Type: AWS::WAFv2::WebACLAssociation
    DependsOn: Deployment
    Properties:
      ResourceArn:
        Fn::Sub: arn:aws:apigateway:${AWS::Region}::/restapis/${GlobalAPIGateway}/stages/${GlobalAPIGateway.Stage}
      WebACLArn:
        Ref: WafaclArn
  GlobalCustomDomainName:
    Type: AWS::CloudFormation::Stack
    Properties:
      Parameters:
        DomainName:
          Fn::FindInMap:
          - Network
          - Ref: Env
          - DomainName
        Env:
          Ref: Env
        Service:
          Fn::FindInMap:
          - Tag
          - Service
          - value
        Squad:
          Fn::FindInMap:
          - Tag
          - Squad
          - value
        Slack:
          Fn::FindInMap:
          - Tag
          - Slack
          - value
        Email:
          Fn::FindInMap:
          - Tag
          - Email
          - value
        HostedZoneId:
          Fn::FindInMap:
          - Network
          - Ref: Env
          - HostedZoneId
        EdgeCertificateArn:
          Fn::FindInMap:
          - Network
          - Ref: Env
          - EdgeCertificateArn
        EndpointType: EDGE
      TemplateURL:
        Fn::Sub:
        - https://docktech-cloudformation-templates.s3.us-east-2.amazonaws.com/aws-cfn-custom-domain-name-template/${version}/cloudformation-${version}.yml
        - version:
            Fn::FindInMap:
            - Tag
            - CustomDomainTemplate
            - value
  GlobalAPIGateway:
    DependsOn: GlobalCustomDomainName
    Type: AWS::Serverless::Api
    Properties:
      StageName: Live
      EndpointConfiguration:
        Type: EDGE
      Variables:
        apiName: global-redirect-api
      Tags:
        env:
          Ref: Env
        service:
          Fn::FindInMap:
          - Tag
          - Service
          - value
        stack:
          Fn::Sub: ${AWS::StackName}
        squad:
          Fn::FindInMap:
          - Tag
          - Squad
          - value
        slack:
          Fn::FindInMap:
          - Tag
          - Slack
          - value
        email:
          Fn::FindInMap:
          - Tag
          - Email
          - value
        resource: api-gateway
      AccessLogSetting:
        DestinationArn:
          Fn::GetAtt:
          - AccessLogGroup
          - Arn
        Format:
          Ref: CustomAccessLogFormatParameter
      MethodSettings:
      - ResourcePath: /*
        HttpMethod: '*'
        MetricsEnabled: true
        DataTraceEnabled: false
        LoggingLevel: INFO
      TracingEnabled: false
      DefinitionBody:
        swagger: '2.0'
        info:
          title: global-redirect-api
        tags:
        - name: global-redirect-api
          description: API Global - redirect to Redhorn products
        schemes:
        - https
        paths:
          /account-services/{proxy+}:
            get:
              produces:
              - application/json
              responses:
                '200':
                  description: 200 response
                  schema:
                    $ref: '#/definitions/Empty'
              security:
              - docknito: []
              x-amazon-apigateway-integration:
                type: http_proxy
                httpMethod: GET
                uri:
                  Fn::Sub: https://${VPCEndpointDNS}/Live/{proxy}
                responses:
                  default:
                    statusCode: '200'
                requestParameters:
                  integration.request.path.proxy: method.request.path.proxy
                  integration.request.header.x-apigw-api-id:
                    Fn::Sub: "'${SleipnirAPIPrivateId}'"
                  integration.request.header.X-Request-ID: context.requestId
                  integration.request.header.X-AppClient-ID: context.authorizer.principalId
                  integration.request.header.client-id: context.authorizer.tenant_id
                  integration.request.header.X-Forwarded-For: context.identity.sourceIp
                passthroughBehavior: when_no_match
                connectionType: VPC_LINK
                connectionId:
                  Fn::ImportValue: VpcLinkIdglobal-redirect-api
            post:
              produces:
              - application/json
              responses:
                '200':
                  description: 200 response
                  schema:
                    $ref: '#/definitions/Empty'
              security:
              - docknito: []
              x-amazon-apigateway-integration:
                type: http_proxy
                httpMethod: POST
                uri:
                  Fn::Sub: https://${VPCEndpointDNS}/Live/{proxy}
                responses:
                  default:
                    statusCode: '200'
                requestParameters:
                  integration.request.path.proxy: method.request.path.proxy
                  integration.request.header.x-apigw-api-id:
                    Fn::Sub: "'${SleipnirAPIPrivateId}'"
                  integration.request.header.X-Request-ID: context.requestId
                  integration.request.header.X-AppClient-ID: context.authorizer.principalId
                  integration.request.header.client-id: context.authorizer.tenant_id
                  integration.request.header.X-Forwarded-For: context.identity.sourceIp
                passthroughBehavior: when_no_match
                connectionType: VPC_LINK
                connectionId:
                  Fn::ImportValue: VpcLinkIdglobal-redirect-api
            delete:
              produces:
              - application/json
              responses:
                '200':
                  description: 200 response
                  schema:
                    $ref: '#/definitions/Empty'
              security:
              - docknito: []
              x-amazon-apigateway-integration:
                type: http_proxy
                httpMethod: DELETE
                uri:
                  Fn::Sub: https://${VPCEndpointDNS}/Live/{proxy}
                responses:
                  default:
                    statusCode: '200'
                requestParameters:
                  integration.request.path.proxy: method.request.path.proxy
                  integration.request.header.x-apigw-api-id:
                    Fn::Sub: "'${SleipnirAPIPrivateId}'"
                  integration.request.header.X-Request-ID: context.requestId
                  integration.request.header.X-AppClient-ID: context.authorizer.principalId
                  integration.request.header.client-id: context.authorizer.tenant_id
                  integration.request.header.X-Forwarded-For: context.identity.sourceIp
                passthroughBehavior: when_no_match
                connectionType: VPC_LINK
                connectionId:
                  Fn::ImportValue: VpcLinkIdglobal-redirect-api
            options:
              produces:
              - application/json
              responses:
                '200':
                  description: 200 response
                  schema:
                    $ref: '#/definitions/Empty'
              security:
              - docknito: []
              x-amazon-apigateway-integration:
                type: http_proxy
                httpMethod: OPTIONS
                uri:
                  Fn::Sub: https://${VPCEndpointDNS}/Live/{proxy}
                responses:
                  default:
                    statusCode: '200'
                requestParameters:
                  integration.request.path.proxy: method.request.path.proxy
                  integration.request.header.x-apigw-api-id:
                    Fn::Sub: "'${SleipnirAPIPrivateId}'"
                  integration.request.header.X-Request-ID: context.requestId
                  integration.request.header.X-AppClient-ID: context.authorizer.principalId
                  integration.request.header.client-id: context.authorizer.tenant_id
                  integration.request.header.X-Forwarded-For: context.identity.sourceIp
                passthroughBehavior: when_no_match
                connectionType: VPC_LINK
                connectionId:
                  Fn::ImportValue: VpcLinkIdglobal-redirect-api
            patch:
              produces:
              - application/json
              responses:
                '200':
                  description: 200 response
                  schema:
                    $ref: '#/definitions/Empty'
              security:
              - docknito: []
              x-amazon-apigateway-integration:
                type: http_proxy
                httpMethod: PATCH
                uri:
                  Fn::Sub: https://${VPCEndpointDNS}/Live/{proxy}
                responses:
                  default:
                    statusCode: '200'
                requestParameters:
                  integration.request.path.proxy: method.request.path.proxy
                  integration.request.header.x-apigw-api-id:
                    Fn::Sub: "'${SleipnirAPIPrivateId}'"
                  integration.request.header.X-Request-ID: context.requestId
                  integration.request.header.X-AppClient-ID: context.authorizer.principalId
                  integration.request.header.client-id: context.authorizer.tenant_id
                  integration.request.header.X-Forwarded-For: context.identity.sourceIp
                passthroughBehavior: when_no_match
                connectionType: VPC_LINK
                connectionId:
                  Fn::ImportValue: VpcLinkIdglobal-redirect-api
            put:
              produces:
              - application/json
              responses:
                '200':
                  description: 200 response
                  schema:
                    $ref: '#/definitions/Empty'
              security:
              - docknito: []
              x-amazon-apigateway-integration:
                type: http_proxy
                httpMethod: PUT
                uri:
                  Fn::Sub: https://${VPCEndpointDNS}/Live/{proxy}
                responses:
                  default:
                    statusCode: '200'
                requestParameters:
                  integration.request.path.proxy: method.request.path.proxy
                  integration.request.header.x-apigw-api-id:
                    Fn::Sub: "'${SleipnirAPIPrivateId}'"
                  integration.request.header.X-Request-ID: context.requestId
                  integration.request.header.X-AppClient-ID: context.authorizer.principalId
                  integration.request.header.client-id: context.authorizer.tenant_id
                  integration.request.header.X-Forwarded-For: context.identity.sourceIp
                passthroughBehavior: when_no_match
                connectionType: VPC_LINK
                connectionId:
                  Fn::ImportValue: VpcLinkIdglobal-redirect-api
            head:
              produces:
              - application/json
              responses:
                '200':
                  description: 200 response
                  schema:
                    $ref: '#/definitions/Empty'
              security:
              - docknito: []
              x-amazon-apigateway-integration:
                type: http_proxy
                httpMethod: HEAD
                uri:
                  Fn::Sub: https://${VPCEndpointDNS}/Live/{proxy}
                responses:
                  default:
                    statusCode: '200'
                requestParameters:
                  integration.request.path.proxy: method.request.path.proxy
                  integration.request.header.x-apigw-api-id:
                    Fn::Sub: "'${SleipnirAPIPrivateId}'"
                  integration.request.header.X-Request-ID: context.requestId
                  integration.request.header.X-AppClient-ID: context.authorizer.principalId
                  integration.request.header.client-id: context.authorizer.tenant_id
                  integration.request.header.X-Forwarded-For: context.identity.sourceIp
                passthroughBehavior: when_no_match
                connectionType: VPC_LINK
                connectionId:
                  Fn::ImportValue: VpcLinkIdglobal-redirect-api
          /account-services/operations/{proxy+}:
            get:
              produces:
              - application/json
              responses:
                '200':
                  description: 200 response
                  schema:
                    $ref: '#/definitions/Empty'
              security:
              - docknito: []
              x-amazon-apigateway-integration:
                type: http_proxy
                httpMethod: GET
                uri:
                  Fn::Sub: https://${VPCEndpointDNS}/Live/public/medjat/gateway/{proxy}
                responses:
                  default:
                    statusCode: '200'
                requestParameters:
                  integration.request.path.proxy: method.request.path.proxy
                  integration.request.header.x-apigw-api-id:
                    Fn::Sub: "'${AccountsServicesAPIPrivateId}'"
                  integration.request.header.X-Request-ID: context.requestId
                  integration.request.header.X-AppClient-ID: context.authorizer.principalId
                  integration.request.header.client-id: context.authorizer.tenant_id
                  integration.request.header.X-Forwarded-For: context.identity.sourceIp
                passthroughBehavior: when_no_match
                connectionType: VPC_LINK
                connectionId:
                  Fn::ImportValue: VpcLinkIdglobal-redirect-api
            post:
              produces:
              - application/json
              responses:
                '200':
                  description: 200 response
                  schema:
                    $ref: '#/definitions/Empty'
              security:
              - docknito: []
              x-amazon-apigateway-integration:
                type: http_proxy
                httpMethod: POST
                uri:
                  Fn::Sub: https://${VPCEndpointDNS}/Live/public/medjat/gateway/{proxy}
                responses:
                  default:
                    statusCode: '200'
                requestParameters:
                  integration.request.path.proxy: method.request.path.proxy
                  integration.request.header.x-apigw-api-id:
                    Fn::Sub: "'${AccountsServicesAPIPrivateId}'"
                  integration.request.header.X-Request-ID: context.requestId
                  integration.request.header.X-AppClient-ID: context.authorizer.principalId
                  integration.request.header.client-id: context.authorizer.tenant_id
                  integration.request.header.X-Forwarded-For: context.identity.sourceIp
                passthroughBehavior: when_no_match
                connectionType: VPC_LINK
                connectionId:
                  Fn::ImportValue: VpcLinkIdglobal-redirect-api
            delete:
              produces:
              - application/json
              responses:
                '200':
                  description: 200 response
                  schema:
                    $ref: '#/definitions/Empty'
              security:
              - docknito: []
              x-amazon-apigateway-integration:
                type: http_proxy
                httpMethod: DELETE
                uri:
                  Fn::Sub: https://${VPCEndpointDNS}/Live/public/medjat/gateway/{proxy}
                responses:
                  default:
                    statusCode: '200'
                requestParameters:
                  integration.request.path.proxy: method.request.path.proxy
                  integration.request.header.x-apigw-api-id:
                    Fn::Sub: "'${AccountsServicesAPIPrivateId}'"
                  integration.request.header.X-Request-ID: context.requestId
                  integration.request.header.X-AppClient-ID: context.authorizer.principalId
                  integration.request.header.client-id: context.authorizer.tenant_id
                  integration.request.header.X-Forwarded-For: context.identity.sourceIp
                passthroughBehavior: when_no_match
                connectionType: VPC_LINK
                connectionId:
                  Fn::ImportValue: VpcLinkIdglobal-redirect-api
            options:
              produces:
              - application/json
              responses:
                '200':
                  description: 200 response
                  schema:
                    $ref: '#/definitions/Empty'
              security:
              - docknito: []
              x-amazon-apigateway-integration:
                type: http_proxy
                httpMethod: OPTIONS
                uri:
                  Fn::Sub: https://${VPCEndpointDNS}/Live/public/medjat/gateway/{proxy}
                responses:
                  default:
                    statusCode: '200'
                requestParameters:
                  integration.request.path.proxy: method.request.path.proxy
                  integration.request.header.x-apigw-api-id:
                    Fn::Sub: "'${AccountsServicesAPIPrivateId}'"
                  integration.request.header.X-Request-ID: context.requestId
                  integration.request.header.X-AppClient-ID: context.authorizer.principalId
                  integration.request.header.client-id: context.authorizer.tenant_id
                  integration.request.header.X-Forwarded-For: context.identity.sourceIp
                passthroughBehavior: when_no_match
                connectionType: VPC_LINK
                connectionId:
                  Fn::ImportValue: VpcLinkIdglobal-redirect-api
            patch:
              produces:
              - application/json
              responses:
                '200':
                  description: 200 response
                  schema:
                    $ref: '#/definitions/Empty'
              security:
              - docknito: []
              x-amazon-apigateway-integration:
                type: http_proxy
                httpMethod: PATCH
                uri:
                  Fn::Sub: https://${VPCEndpointDNS}/Live/public/medjat/gateway/{proxy}
                responses:
                  default:
                    statusCode: '200'
                requestParameters:
                  integration.request.path.proxy: method.request.path.proxy
                  integration.request.header.x-apigw-api-id:
                    Fn::Sub: "'${AccountsServicesAPIPrivateId}'"
                  integration.request.header.X-Request-ID: context.requestId
                  integration.request.header.X-AppClient-ID: context.authorizer.principalId
                  integration.request.header.client-id: context.authorizer.tenant_id
                  integration.request.header.X-Forwarded-For: context.identity.sourceIp
                passthroughBehavior: when_no_match
                connectionType: VPC_LINK
                connectionId:
                  Fn::ImportValue: VpcLinkIdglobal-redirect-api
            put:
              produces:
              - application/json
              responses:
                '200':
                  description: 200 response
                  schema:
                    $ref: '#/definitions/Empty'
              security:
              - docknito: []
              x-amazon-apigateway-integration:
                type: http_proxy
                httpMethod: PUT
                uri:
                  Fn::Sub: https://${VPCEndpointDNS}/Live/public/medjat/gateway/{proxy}
                responses:
                  default:
                    statusCode: '200'
                requestParameters:
                  integration.request.path.proxy: method.request.path.proxy
                  integration.request.header.x-apigw-api-id:
                    Fn::Sub: "'${AccountsServicesAPIPrivateId}'"
                  integration.request.header.X-Request-ID: context.requestId
                  integration.request.header.X-AppClient-ID: context.authorizer.principalId
                  integration.request.header.client-id: context.authorizer.tenant_id
                  integration.request.header.X-Forwarded-For: context.identity.sourceIp
                passthroughBehavior: when_no_match
                connectionType: VPC_LINK
                connectionId:
                  Fn::ImportValue: VpcLinkIdglobal-redirect-api
            head:
              produces:
              - application/json
              responses:
                '200':
                  description: 200 response
                  schema:
                    $ref: '#/definitions/Empty'
              security:
              - docknito: []
              x-amazon-apigateway-integration:
                type: http_proxy
                httpMethod: HEAD
                uri:
                  Fn::Sub: https://${VPCEndpointDNS}/Live/public/medjat/gateway/{proxy}
                responses:
                  default:
                    statusCode: '200'
                requestParameters:
                  integration.request.path.proxy: method.request.path.proxy
                  integration.request.header.x-apigw-api-id:
                    Fn::Sub: "'${AccountsServicesAPIPrivateId}'"
                  integration.request.header.X-Request-ID: context.requestId
                  integration.request.header.X-AppClient-ID: context.authorizer.principalId
                  integration.request.header.client-id: context.authorizer.tenant_id
                  integration.request.header.X-Forwarded-For: context.identity.sourceIp
                passthroughBehavior: when_no_match
                connectionType: VPC_LINK
                connectionId:
                  Fn::ImportValue: VpcLinkIdglobal-redirect-api
          /account-services/management/{proxy+}:
            get:
              produces:
              - application/json
              responses:
                '200':
                  description: 200 response
                  schema:
                    $ref: '#/definitions/Empty'
              security:
              - docknito: []
              x-amazon-apigateway-integration:
                type: http_proxy
                httpMethod: GET
                uri:
                  Fn::Sub: https://${VPCEndpointDNS}/Live/public/medjat/account/{proxy}
                responses:
                  default:
                    statusCode: '200'
                requestParameters:
                  integration.request.path.proxy: method.request.path.proxy
                  integration.request.header.x-apigw-api-id:
                    Fn::Sub: "'${AccountsServicesAPIPrivateId}'"
                  integration.request.header.X-Request-ID: context.requestId
                  integration.request.header.X-AppClient-ID: context.authorizer.principalId
                  integration.request.header.client-id: context.authorizer.tenant_id
                  integration.request.header.X-Forwarded-For: context.identity.sourceIp
                passthroughBehavior: when_no_match
                connectionType: VPC_LINK
                connectionId:
                  Fn::ImportValue: VpcLinkIdglobal-redirect-api
            post:
              produces:
              - application/json
              responses:
                '200':
                  description: 200 response
                  schema:
                    $ref: '#/definitions/Empty'
              security:
              - docknito: []
              x-amazon-apigateway-integration:
                type: http_proxy
                httpMethod: POST
                uri:
                  Fn::Sub: https://${VPCEndpointDNS}/Live/public/medjat/account/{proxy}
                responses:
                  default:
                    statusCode: '200'
                requestParameters:
                  integration.request.path.proxy: method.request.path.proxy
                  integration.request.header.x-apigw-api-id:
                    Fn::Sub: "'${AccountsServicesAPIPrivateId}'"
                  integration.request.header.X-Request-ID: context.requestId
                  integration.request.header.X-AppClient-ID: context.authorizer.principalId
                  integration.request.header.client-id: context.authorizer.tenant_id
                  integration.request.header.X-Forwarded-For: context.identity.sourceIp
                passthroughBehavior: when_no_match
                connectionType: VPC_LINK
                connectionId:
                  Fn::ImportValue: VpcLinkIdglobal-redirect-api
            delete:
              produces:
              - application/json
              responses:
                '200':
                  description: 200 response
                  schema:
                    $ref: '#/definitions/Empty'
              security:
              - docknito: []
              x-amazon-apigateway-integration:
                type: http_proxy
                httpMethod: DELETE
                uri:
                  Fn::Sub: https://${VPCEndpointDNS}/Live/public/medjat/account/{proxy}
                responses:
                  default:
                    statusCode: '200'
                requestParameters:
                  integration.request.path.proxy: method.request.path.proxy
                  integration.request.header.x-apigw-api-id:
                    Fn::Sub: "'${AccountsServicesAPIPrivateId}'"
                  integration.request.header.X-Request-ID: context.requestId
                  integration.request.header.X-AppClient-ID: context.authorizer.principalId
                  integration.request.header.client-id: context.authorizer.tenant_id
                  integration.request.header.X-Forwarded-For: context.identity.sourceIp
                passthroughBehavior: when_no_match
                connectionType: VPC_LINK
                connectionId:
                  Fn::ImportValue: VpcLinkIdglobal-redirect-api
            options:
              produces:
              - application/json
              responses:
                '200':
                  description: 200 response
                  schema:
                    $ref: '#/definitions/Empty'
              security:
              - docknito: []
              x-amazon-apigateway-integration:
                type: http_proxy
                httpMethod: OPTIONS
                uri:
                  Fn::Sub: https://${VPCEndpointDNS}/Live/public/medjat/account/{proxy}
                responses:
                  default:
                    statusCode: '200'
                requestParameters:
                  integration.request.path.proxy: method.request.path.proxy
                  integration.request.header.x-apigw-api-id:
                    Fn::Sub: "'${AccountsServicesAPIPrivateId}'"
                  integration.request.header.X-Request-ID: context.requestId
                  integration.request.header.X-AppClient-ID: context.authorizer.principalId
                  integration.request.header.client-id: context.authorizer.tenant_id
                  integration.request.header.X-Forwarded-For: context.identity.sourceIp
                passthroughBehavior: when_no_match
                connectionType: VPC_LINK
                connectionId:
                  Fn::ImportValue: VpcLinkIdglobal-redirect-api
            patch:
              produces:
              - application/json
              responses:
                '200':
                  description: 200 response
                  schema:
                    $ref: '#/definitions/Empty'
              security:
              - docknito: []
              x-amazon-apigateway-integration:
                type: http_proxy
                httpMethod: PATCH
                uri:
                  Fn::Sub: https://${VPCEndpointDNS}/Live/public/medjat/account/{proxy}
                responses:
                  default:
                    statusCode: '200'
                requestParameters:
                  integration.request.path.proxy: method.request.path.proxy
                  integration.request.header.x-apigw-api-id:
                    Fn::Sub: "'${AccountsServicesAPIPrivateId}'"
                  integration.request.header.X-Request-ID: context.requestId
                  integration.request.header.X-AppClient-ID: context.authorizer.principalId
                  integration.request.header.client-id: context.authorizer.tenant_id
                  integration.request.header.X-Forwarded-For: context.identity.sourceIp
                passthroughBehavior: when_no_match
                connectionType: VPC_LINK
                connectionId:
                  Fn::ImportValue: VpcLinkIdglobal-redirect-api
            put:
              produces:
              - application/json
              responses:
                '200':
                  description: 200 response
                  schema:
                    $ref: '#/definitions/Empty'
              security:
              - docknito: []
              x-amazon-apigateway-integration:
                type: http_proxy
                httpMethod: PUT
                uri:
                  Fn::Sub: https://${VPCEndpointDNS}/Live/public/medjat/account/{proxy}
                responses:
                  default:
                    statusCode: '200'
                requestParameters:
                  integration.request.path.proxy: method.request.path.proxy
                  integration.request.header.x-apigw-api-id:
                    Fn::Sub: "'${AccountsServicesAPIPrivateId}'"
                  integration.request.header.X-Request-ID: context.requestId
                  integration.request.header.X-AppClient-ID: context.authorizer.principalId
                  integration.request.header.client-id: context.authorizer.tenant_id
                  integration.request.header.X-Forwarded-For: context.identity.sourceIp
                passthroughBehavior: when_no_match
                connectionType: VPC_LINK
                connectionId:
                  Fn::ImportValue: VpcLinkIdglobal-redirect-api
            head:
              produces:
              - application/json
              responses:
                '200':
                  description: 200 response
                  schema:
                    $ref: '#/definitions/Empty'
              security:
              - docknito: []
              x-amazon-apigateway-integration:
                type: http_proxy
                httpMethod: HEAD
                uri:
                  Fn::Sub: https://${VPCEndpointDNS}/Live/public/medjat/account/{proxy}
                responses:
                  default:
                    statusCode: '200'
                requestParameters:
                  integration.request.path.proxy: method.request.path.proxy
                  integration.request.header.x-apigw-api-id:
                    Fn::Sub: "'${AccountsServicesAPIPrivateId}'"
                  integration.request.header.X-Request-ID: context.requestId
                  integration.request.header.X-AppClient-ID: context.authorizer.principalId
                  integration.request.header.client-id: context.authorizer.tenant_id
                  integration.request.header.X-Forwarded-For: context.identity.sourceIp
                passthroughBehavior: when_no_match
                connectionType: VPC_LINK
                connectionId:
                  Fn::ImportValue: VpcLinkIdglobal-redirect-api
          /charges/v1/group-types:
            get:
              produces:
              - application/json
              responses:
                '200':
                  description: 200 response
                  schema:
                    $ref: '#/definitions/Empty'
              security:
              - docknito: []
              x-amazon-apigateway-integration:
                type: http_proxy
                httpMethod: GET
                uri:
                  Fn::Sub: https://${VPCEndpointDNS}/Live/v1/component-group-types
                responses:
                  default:
                    statusCode: '200'
                requestParameters:
                  integration.request.header.x-apigw-api-id:
                    Fn::Sub: "'${DrachmaAPIPrivateId}'"
                  integration.request.header.X-Request-ID: context.requestId
                  integration.request.header.X-AppClient-ID: context.authorizer.principalId
                  integration.request.header.client-id: context.authorizer.tenant_id
                  integration.request.header.X-Forwarded-For: context.identity.sourceIp
                passthroughBehavior: when_no_match
                connectionType: VPC_LINK
                connectionId:
                  Fn::ImportValue: VpcLinkIdglobal-redirect-api
            post:
              produces:
              - application/json
              responses:
                '200':
                  description: 200 response
                  schema:
                    $ref: '#/definitions/Empty'
              security:
              - docknito: []
              x-amazon-apigateway-integration:
                type: http_proxy
                httpMethod: POST
                uri:
                  Fn::Sub: https://${VPCEndpointDNS}/Live/v1/component-group-types
                responses:
                  default:
                    statusCode: '200'
                requestParameters:
                  integration.request.header.x-apigw-api-id:
                    Fn::Sub: "'${DrachmaAPIPrivateId}'"
                  integration.request.header.X-Request-ID: context.requestId
                  integration.request.header.X-AppClient-ID: context.authorizer.principalId
                  integration.request.header.client-id: context.authorizer.tenant_id
                  integration.request.header.X-Forwarded-For: context.identity.sourceIp
                passthroughBehavior: when_no_match
                connectionType: VPC_LINK
                connectionId:
                  Fn::ImportValue: VpcLinkIdglobal-redirect-api
          /charges/v1/group-types/{proxy+}:
            get:
              produces:
              - application/json
              responses:
                '200':
                  description: 200 response
                  schema:
                    $ref: '#/definitions/Empty'
              security:
              - docknito: []
              x-amazon-apigateway-integration:
                type: http_proxy
                httpMethod: GET
                uri:
                  Fn::Sub: https://${VPCEndpointDNS}/Live/v1/component-group-types/{proxy}
                responses:
                  default:
                    statusCode: '200'
                requestParameters:
                  integration.request.path.proxy: method.request.path.proxy
                  integration.request.header.x-apigw-api-id:
                    Fn::Sub: "'${DrachmaAPIPrivateId}'"
                  integration.request.header.X-Request-ID: context.requestId
                  integration.request.header.X-AppClient-ID: context.authorizer.principalId
                  integration.request.header.client-id: context.authorizer.tenant_id
                  integration.request.header.X-Forwarded-For: context.identity.sourceIp
                passthroughBehavior: when_no_match
                connectionType: VPC_LINK
                connectionId:
                  Fn::ImportValue: VpcLinkIdglobal-redirect-api
            put:
              produces:
              - application/json
              responses:
                '200':
                  description: 200 response
                  schema:
                    $ref: '#/definitions/Empty'
              security:
              - docknito: []
              x-amazon-apigateway-integration:
                type: http_proxy
                httpMethod: PUT
                uri:
                  Fn::Sub: https://${VPCEndpointDNS}/Live/v1/component-group-types/{proxy}
                responses:
                  default:
                    statusCode: '200'
                requestParameters:
                  integration.request.path.proxy: method.request.path.proxy
                  integration.request.header.x-apigw-api-id:
                    Fn::Sub: "'${DrachmaAPIPrivateId}'"
                  integration.request.header.X-Request-ID: context.requestId
                  integration.request.header.X-AppClient-ID: context.authorizer.principalId
                  integration.request.header.client-id: context.authorizer.tenant_id
                  integration.request.header.X-Forwarded-For: context.identity.sourceIp
                passthroughBehavior: when_no_match
                connectionType: VPC_LINK
                connectionId:
                  Fn::ImportValue: VpcLinkIdglobal-redirect-api
            delete:
              produces:
              - application/json
              responses:
                '200':
                  description: 200 response
                  schema:
                    $ref: '#/definitions/Empty'
              security:
              - docknito: []
              x-amazon-apigateway-integration:
                type: http_proxy
                httpMethod: DELETE
                uri:
                  Fn::Sub: https://${VPCEndpointDNS}/Live/v1/component-group-types/{proxy}
                responses:
                  default:
                    statusCode: '200'
                requestParameters:
                  integration.request.path.proxy: method.request.path.proxy
                  integration.request.header.x-apigw-api-id:
                    Fn::Sub: "'${DrachmaAPIPrivateId}'"
                  integration.request.header.X-Request-ID: context.requestId
                  integration.request.header.X-AppClient-ID: context.authorizer.principalId
                  integration.request.header.client-id: context.authorizer.tenant_id
                  integration.request.header.X-Forwarded-For: context.identity.sourceIp
                passthroughBehavior: when_no_match
                connectionType: VPC_LINK
                connectionId:
                  Fn::ImportValue: VpcLinkIdglobal-redirect-api
          /charges/v1/types:
            get:
              produces:
              - application/json
              responses:
                '200':
                  description: 200 response
                  schema:
                    $ref: '#/definitions/Empty'
              security:
              - docknito: []
              x-amazon-apigateway-integration:
                type: http_proxy
                httpMethod: GET
                uri:
                  Fn::Sub: https://${VPCEndpointDNS}/Live/v1/component-types
                responses:
                  default:
                    statusCode: '200'
                requestParameters:
                  integration.request.header.x-apigw-api-id:
                    Fn::Sub: "'${DrachmaAPIPrivateId}'"
                  integration.request.header.X-Request-ID: context.requestId
                  integration.request.header.X-AppClient-ID: context.authorizer.principalId
                  integration.request.header.client-id: context.authorizer.tenant_id
                  integration.request.header.X-Forwarded-For: context.identity.sourceIp
                passthroughBehavior: when_no_match
                connectionType: VPC_LINK
                connectionId:
                  Fn::ImportValue: VpcLinkIdglobal-redirect-api
            post:
              produces:
              - application/json
              responses:
                '200':
                  description: 200 response
                  schema:
                    $ref: '#/definitions/Empty'
              security:
              - docknito: []
              x-amazon-apigateway-integration:
                type: http_proxy
                httpMethod: POST
                uri:
                  Fn::Sub: https://${VPCEndpointDNS}/Live/v1/component-types
                responses:
                  default:
                    statusCode: '200'
                requestParameters:
                  integration.request.header.x-apigw-api-id:
                    Fn::Sub: "'${DrachmaAPIPrivateId}'"
                  integration.request.header.X-Request-ID: context.requestId
                  integration.request.header.X-AppClient-ID: context.authorizer.principalId
                  integration.request.header.client-id: context.authorizer.tenant_id
                  integration.request.header.X-Forwarded-For: context.identity.sourceIp
                passthroughBehavior: when_no_match
                connectionType: VPC_LINK
                connectionId:
                  Fn::ImportValue: VpcLinkIdglobal-redirect-api
          /charges/v1/types/{proxy+}:
            get:
              produces:
              - application/json
              responses:
                '200':
                  description: 200 response
                  schema:
                    $ref: '#/definitions/Empty'
              security:
              - docknito: []
              x-amazon-apigateway-integration:
                type: http_proxy
                httpMethod: GET
                uri:
                  Fn::Sub: https://${VPCEndpointDNS}/Live/v1/component-types/{proxy}
                responses:
                  default:
                    statusCode: '200'
                requestParameters:
                  integration.request.path.proxy: method.request.path.proxy
                  integration.request.header.x-apigw-api-id:
                    Fn::Sub: "'${DrachmaAPIPrivateId}'"
                  integration.request.header.X-Request-ID: context.requestId
                  integration.request.header.X-AppClient-ID: context.authorizer.principalId
                  integration.request.header.client-id: context.authorizer.tenant_id
                  integration.request.header.X-Forwarded-For: context.identity.sourceIp
                passthroughBehavior: when_no_match
                connectionType: VPC_LINK
                connectionId:
                  Fn::ImportValue: VpcLinkIdglobal-redirect-api
            put:
              produces:
              - application/json
              responses:
                '200':
                  description: 200 response
                  schema:
                    $ref: '#/definitions/Empty'
              security:
              - docknito: []
              x-amazon-apigateway-integration:
                type: http_proxy
                httpMethod: PUT
                uri:
                  Fn::Sub: https://${VPCEndpointDNS}/Live/v1/component-types/{proxy}
                responses:
                  default:
                    statusCode: '200'
                requestParameters:
                  integration.request.path.proxy: method.request.path.proxy
                  integration.request.header.x-apigw-api-id:
                    Fn::Sub: "'${DrachmaAPIPrivateId}'"
                  integration.request.header.X-Request-ID: context.requestId
                  integration.request.header.X-AppClient-ID: context.authorizer.principalId
                  integration.request.header.client-id: context.authorizer.tenant_id
                  integration.request.header.X-Forwarded-For: context.identity.sourceIp
                passthroughBehavior: when_no_match
                connectionType: VPC_LINK
                connectionId:
                  Fn::ImportValue: VpcLinkIdglobal-redirect-api
            delete:
              produces:
              - application/json
              responses:
                '200':
                  description: 200 response
                  schema:
                    $ref: '#/definitions/Empty'
              security:
              - docknito: []
              x-amazon-apigateway-integration:
                type: http_proxy
                httpMethod: DELETE
                uri:
                  Fn::Sub: https://${VPCEndpointDNS}/Live/v1/component-types/{proxy}
                responses:
                  default:
                    statusCode: '200'
                requestParameters:
                  integration.request.path.proxy: method.request.path.proxy
                  integration.request.header.x-apigw-api-id:
                    Fn::Sub: "'${DrachmaAPIPrivateId}'"
                  integration.request.header.X-Request-ID: context.requestId
                  integration.request.header.X-AppClient-ID: context.authorizer.principalId
                  integration.request.header.client-id: context.authorizer.tenant_id
                  integration.request.header.X-Forwarded-For: context.identity.sourceIp
                passthroughBehavior: when_no_match
                connectionType: VPC_LINK
                connectionId:
                  Fn::ImportValue: VpcLinkIdglobal-redirect-api
          /charges/v1/fee-configurations:
            get:
              produces:
              - application/json
              responses:
                '200':
                  description: 200 response
                  schema:
                    $ref: '#/definitions/Empty'
              security:
              - docknito: []
              x-amazon-apigateway-integration:
                type: http_proxy
                httpMethod: GET
                uri:
                  Fn::Sub: https://${VPCEndpointDNS}/Live/v1/fee-configurations
                responses:
                  default:
                    statusCode: '200'
                requestParameters:
                  integration.request.header.x-apigw-api-id:
                    Fn::Sub: "'${DrachmaAPIPrivateId}'"
                  integration.request.header.X-Request-ID: context.requestId
                  integration.request.header.X-AppClient-ID: context.authorizer.principalId
                  integration.request.header.client-id: context.authorizer.tenant_id
                  integration.request.header.X-Forwarded-For: context.identity.sourceIp
                passthroughBehavior: when_no_match
                connectionType: VPC_LINK
                connectionId:
                  Fn::ImportValue: VpcLinkIdglobal-redirect-api
            post:
              produces:
              - application/json
              responses:
                '200':
                  description: 200 response
                  schema:
                    $ref: '#/definitions/Empty'
              security:
              - docknito: []
              x-amazon-apigateway-integration:
                type: http_proxy
                httpMethod: POST
                uri:
                  Fn::Sub: https://${VPCEndpointDNS}/Live/v1/fee-configurations
                responses:
                  default:
                    statusCode: '200'
                requestParameters:
                  integration.request.header.x-apigw-api-id:
                    Fn::Sub: "'${DrachmaAPIPrivateId}'"
                  integration.request.header.X-Request-ID: context.requestId
                  integration.request.header.X-AppClient-ID: context.authorizer.principalId
                  integration.request.header.client-id: context.authorizer.tenant_id
                  integration.request.header.X-Forwarded-For: context.identity.sourceIp
                passthroughBehavior: when_no_match
                connectionType: VPC_LINK
                connectionId:
                  Fn::ImportValue: VpcLinkIdglobal-redirect-api
          /charges/v1/fee-configurations/{proxy+}:
            get:
              produces:
              - application/json
              responses:
                '200':
                  description: 200 response
                  schema:
                    $ref: '#/definitions/Empty'
              security:
              - docknito: []
              x-amazon-apigateway-integration:
                type: http_proxy
                httpMethod: GET
                uri:
                  Fn::Sub: https://${VPCEndpointDNS}/Live/v1/fee-configurations/{proxy}
                responses:
                  default:
                    statusCode: '200'
                requestParameters:
                  integration.request.path.proxy: method.request.path.proxy
                  integration.request.header.x-apigw-api-id:
                    Fn::Sub: "'${DrachmaAPIPrivateId}'"
                  integration.request.header.X-Request-ID: context.requestId
                  integration.request.header.X-AppClient-ID: context.authorizer.principalId
                  integration.request.header.client-id: context.authorizer.tenant_id
                  integration.request.header.X-Forwarded-For: context.identity.sourceIp
                passthroughBehavior: when_no_match
                connectionType: VPC_LINK
                connectionId:
                  Fn::ImportValue: VpcLinkIdglobal-redirect-api
            put:
              produces:
              - application/json
              responses:
                '200':
                  description: 200 response
                  schema:
                    $ref: '#/definitions/Empty'
              security:
              - docknito: []
              x-amazon-apigateway-integration:
                type: http_proxy
                httpMethod: PUT
                uri:
                  Fn::Sub: https://${VPCEndpointDNS}/Live/v1/fee-configurations/{proxy}
                responses:
                  default:
                    statusCode: '200'
                requestParameters:
                  integration.request.path.proxy: method.request.path.proxy
                  integration.request.header.x-apigw-api-id:
                    Fn::Sub: "'${DrachmaAPIPrivateId}'"
                  integration.request.header.X-Request-ID: context.requestId
                  integration.request.header.X-AppClient-ID: context.authorizer.principalId
                  integration.request.header.client-id: context.authorizer.tenant_id
                  integration.request.header.X-Forwarded-For: context.identity.sourceIp
                passthroughBehavior: when_no_match
                connectionType: VPC_LINK
                connectionId:
                  Fn::ImportValue: VpcLinkIdglobal-redirect-api
            delete:
              produces:
              - application/json
              responses:
                '200':
                  description: 200 response
                  schema:
                    $ref: '#/definitions/Empty'
              security:
              - docknito: []
              x-amazon-apigateway-integration:
                type: http_proxy
                httpMethod: DELETE
                uri:
                  Fn::Sub: https://${VPCEndpointDNS}/Live/v1/fee-configurations/{proxy}
                responses:
                  default:
                    statusCode: '200'
                requestParameters:
                  integration.request.path.proxy: method.request.path.proxy
                  integration.request.header.x-apigw-api-id:
                    Fn::Sub: "'${DrachmaAPIPrivateId}'"
                  integration.request.header.X-Request-ID: context.requestId
                  integration.request.header.X-AppClient-ID: context.authorizer.principalId
                  integration.request.header.client-id: context.authorizer.tenant_id
                  integration.request.header.X-Forwarded-For: context.identity.sourceIp
                passthroughBehavior: when_no_match
                connectionType: VPC_LINK
                connectionId:
                  Fn::ImportValue: VpcLinkIdglobal-redirect-api
          /charges/v1/fee-ranges:
            get:
              produces:
              - application/json
              responses:
                '200':
                  description: 200 response
                  schema:
                    $ref: '#/definitions/Empty'
              security:
              - docknito: []
              x-amazon-apigateway-integration:
                type: http_proxy
                httpMethod: GET
                uri:
                  Fn::Sub: https://${VPCEndpointDNS}/Live/v1/fee-ranges
                responses:
                  default:
                    statusCode: '200'
                requestParameters:
                  integration.request.header.x-apigw-api-id:
                    Fn::Sub: "'${DrachmaAPIPrivateId}'"
                  integration.request.header.X-Request-ID: context.requestId
                  integration.request.header.X-AppClient-ID: context.authorizer.principalId
                  integration.request.header.client-id: context.authorizer.tenant_id
                  integration.request.header.X-Forwarded-For: context.identity.sourceIp
                passthroughBehavior: when_no_match
                connectionType: VPC_LINK
                connectionId:
                  Fn::ImportValue: VpcLinkIdglobal-redirect-api
            post:
              produces:
              - application/json
              responses:
                '200':
                  description: 200 response
                  schema:
                    $ref: '#/definitions/Empty'
              security:
              - docknito: []
              x-amazon-apigateway-integration:
                type: http_proxy
                httpMethod: POST
                uri:
                  Fn::Sub: https://${VPCEndpointDNS}/Live/v1/fee-ranges
                responses:
                  default:
                    statusCode: '200'
                requestParameters:
                  integration.request.header.x-apigw-api-id:
                    Fn::Sub: "'${DrachmaAPIPrivateId}'"
                  integration.request.header.X-Request-ID: context.requestId
                  integration.request.header.X-AppClient-ID: context.authorizer.principalId
                  integration.request.header.client-id: context.authorizer.tenant_id
                  integration.request.header.X-Forwarded-For: context.identity.sourceIp
                passthroughBehavior: when_no_match
                connectionType: VPC_LINK
                connectionId:
                  Fn::ImportValue: VpcLinkIdglobal-redirect-api
          /charges/v1/fee-ranges/{proxy+}:
            get:
              produces:
              - application/json
              responses:
                '200':
                  description: 200 response
                  schema:
                    $ref: '#/definitions/Empty'
              security:
              - docknito: []
              x-amazon-apigateway-integration:
                type: http_proxy
                httpMethod: GET
                uri:
                  Fn::Sub: https://${VPCEndpointDNS}/Live/v1/fee-ranges/{proxy}
                responses:
                  default:
                    statusCode: '200'
                requestParameters:
                  integration.request.path.proxy: method.request.path.proxy
                  integration.request.header.x-apigw-api-id:
                    Fn::Sub: "'${DrachmaAPIPrivateId}'"
                  integration.request.header.X-Request-ID: context.requestId
                  integration.request.header.X-AppClient-ID: context.authorizer.principalId
                  integration.request.header.client-id: context.authorizer.tenant_id
                  integration.request.header.X-Forwarded-For: context.identity.sourceIp
                passthroughBehavior: when_no_match
                connectionType: VPC_LINK
                connectionId:
                  Fn::ImportValue: VpcLinkIdglobal-redirect-api
            put:
              produces:
              - application/json
              responses:
                '200':
                  description: 200 response
                  schema:
                    $ref: '#/definitions/Empty'
              security:
              - docknito: []
              x-amazon-apigateway-integration:
                type: http_proxy
                httpMethod: PUT
                uri:
                  Fn::Sub: https://${VPCEndpointDNS}/Live/v1/fee-ranges/{proxy}
                responses:
                  default:
                    statusCode: '200'
                requestParameters:
                  integration.request.path.proxy: method.request.path.proxy
                  integration.request.header.x-apigw-api-id:
                    Fn::Sub: "'${DrachmaAPIPrivateId}'"
                  integration.request.header.X-Request-ID: context.requestId
                  integration.request.header.X-AppClient-ID: context.authorizer.principalId
                  integration.request.header.client-id: context.authorizer.tenant_id
                  integration.request.header.X-Forwarded-For: context.identity.sourceIp
                passthroughBehavior: when_no_match
                connectionType: VPC_LINK
                connectionId:
                  Fn::ImportValue: VpcLinkIdglobal-redirect-api
            delete:
              produces:
              - application/json
              responses:
                '200':
                  description: 200 response
                  schema:
                    $ref: '#/definitions/Empty'
              security:
              - docknito: []
              x-amazon-apigateway-integration:
                type: http_proxy
                httpMethod: DELETE
                uri:
                  Fn::Sub: https://${VPCEndpointDNS}/Live/v1/fee-ranges/{proxy}
                responses:
                  default:
                    statusCode: '200'
                requestParameters:
                  integration.request.path.proxy: method.request.path.proxy
                  integration.request.header.x-apigw-api-id:
                    Fn::Sub: "'${DrachmaAPIPrivateId}'"
                  integration.request.header.X-Request-ID: context.requestId
                  integration.request.header.X-AppClient-ID: context.authorizer.principalId
                  integration.request.header.client-id: context.authorizer.tenant_id
                  integration.request.header.X-Forwarded-For: context.identity.sourceIp
                passthroughBehavior: when_no_match
                connectionType: VPC_LINK
                connectionId:
                  Fn::ImportValue: VpcLinkIdglobal-redirect-api
          /charges/v1/fee-packages:
            get:
              produces:
              - application/json
              responses:
                '200':
                  description: 200 response
                  schema:
                    $ref: '#/definitions/Empty'
              security:
              - docknito: []
              x-amazon-apigateway-integration:
                type: http_proxy
                httpMethod: GET
                uri:
                  Fn::Sub: https://${VPCEndpointDNS}/Live/v1/fee-packages
                responses:
                  default:
                    statusCode: '200'
                requestParameters:
                  integration.request.header.x-apigw-api-id:
                    Fn::Sub: "'${DrachmaAPIPrivateId}'"
                  integration.request.header.X-Request-ID: context.requestId
                  integration.request.header.X-AppClient-ID: context.authorizer.principalId
                  integration.request.header.client-id: context.authorizer.tenant_id
                  integration.request.header.X-Forwarded-For: context.identity.sourceIp
                passthroughBehavior: when_no_match
                connectionType: VPC_LINK
                connectionId:
                  Fn::ImportValue: VpcLinkIdglobal-redirect-api
            post:
              produces:
              - application/json
              responses:
                '200':
                  description: 200 response
                  schema:
                    $ref: '#/definitions/Empty'
              security:
              - docknito: []
              x-amazon-apigateway-integration:
                type: http_proxy
                httpMethod: POST
                uri:
                  Fn::Sub: https://${VPCEndpointDNS}/Live/v1/fee-packages
                responses:
                  default:
                    statusCode: '200'
                requestParameters:
                  integration.request.header.x-apigw-api-id:
                    Fn::Sub: "'${DrachmaAPIPrivateId}'"
                  integration.request.header.X-Request-ID: context.requestId
                  integration.request.header.X-AppClient-ID: context.authorizer.principalId
                  integration.request.header.client-id: context.authorizer.tenant_id
                  integration.request.header.X-Forwarded-For: context.identity.sourceIp
                passthroughBehavior: when_no_match
                connectionType: VPC_LINK
                connectionId:
                  Fn::ImportValue: VpcLinkIdglobal-redirect-api
          /charges/v1/fee-packages/{proxy+}:
            get:
              produces:
              - application/json
              responses:
                '200':
                  description: 200 response
                  schema:
                    $ref: '#/definitions/Empty'
              security:
              - docknito: []
              x-amazon-apigateway-integration:
                type: http_proxy
                httpMethod: GET
                uri:
                  Fn::Sub: https://${VPCEndpointDNS}/Live/v1/fee-packages/{proxy}
                responses:
                  default:
                    statusCode: '200'
                requestParameters:
                  integration.request.path.proxy: method.request.path.proxy
                  integration.request.header.x-apigw-api-id:
                    Fn::Sub: "'${DrachmaAPIPrivateId}'"
                  integration.request.header.X-Request-ID: context.requestId
                  integration.request.header.X-AppClient-ID: context.authorizer.principalId
                  integration.request.header.client-id: context.authorizer.tenant_id
                  integration.request.header.X-Forwarded-For: context.identity.sourceIp
                passthroughBehavior: when_no_match
                connectionType: VPC_LINK
                connectionId:
                  Fn::ImportValue: VpcLinkIdglobal-redirect-api
            put:
              produces:
              - application/json
              responses:
                '200':
                  description: 200 response
                  schema:
                    $ref: '#/definitions/Empty'
              security:
              - docknito: []
              x-amazon-apigateway-integration:
                type: http_proxy
                httpMethod: PUT
                uri:
                  Fn::Sub: https://${VPCEndpointDNS}/Live/v1/fee-packages/{proxy}
                responses:
                  default:
                    statusCode: '200'
                requestParameters:
                  integration.request.path.proxy: method.request.path.proxy
                  integration.request.header.x-apigw-api-id:
                    Fn::Sub: "'${DrachmaAPIPrivateId}'"
                  integration.request.header.X-Request-ID: context.requestId
                  integration.request.header.X-AppClient-ID: context.authorizer.principalId
                  integration.request.header.client-id: context.authorizer.tenant_id
                  integration.request.header.X-Forwarded-For: context.identity.sourceIp
                passthroughBehavior: when_no_match
                connectionType: VPC_LINK
                connectionId:
                  Fn::ImportValue: VpcLinkIdglobal-redirect-api
            delete:
              produces:
              - application/json
              responses:
                '200':
                  description: 200 response
                  schema:
                    $ref: '#/definitions/Empty'
              security:
              - docknito: []
              x-amazon-apigateway-integration:
                type: http_proxy
                httpMethod: DELETE
                uri:
                  Fn::Sub: https://${VPCEndpointDNS}/Live/v1/fee-packages/{proxy}
                responses:
                  default:
                    statusCode: '200'
                requestParameters:
                  integration.request.path.proxy: method.request.path.proxy
                  integration.request.header.x-apigw-api-id:
                    Fn::Sub: "'${DrachmaAPIPrivateId}'"
                  integration.request.header.X-Request-ID: context.requestId
                  integration.request.header.X-AppClient-ID: context.authorizer.principalId
                  integration.request.header.client-id: context.authorizer.tenant_id
                  integration.request.header.X-Forwarded-For: context.identity.sourceIp
                passthroughBehavior: when_no_match
                connectionType: VPC_LINK
                connectionId:
                  Fn::ImportValue: VpcLinkIdglobal-redirect-api
          /charges/v1/custom-fee-packages:
            get:
              produces:
              - application/json
              responses:
                '200':
                  description: 200 response
                  schema:
                    $ref: '#/definitions/Empty'
              security:
              - docknito: []
              x-amazon-apigateway-integration:
                type: http_proxy
                httpMethod: GET
                uri:
                  Fn::Sub: https://${VPCEndpointDNS}/Live/v1/custom-fee-packages
                responses:
                  default:
                    statusCode: '200'
                requestParameters:
                  integration.request.header.x-apigw-api-id:
                    Fn::Sub: "'${DrachmaAPIPrivateId}'"
                  integration.request.header.X-Request-ID: context.requestId
                  integration.request.header.X-AppClient-ID: context.authorizer.principalId
                  integration.request.header.client-id: context.authorizer.tenant_id
                  integration.request.header.X-Forwarded-For: context.identity.sourceIp
                passthroughBehavior: when_no_match
                connectionType: VPC_LINK
                connectionId:
                  Fn::ImportValue: VpcLinkIdglobal-redirect-api
            post:
              produces:
              - application/json
              responses:
                '200':
                  description: 200 response
                  schema:
                    $ref: '#/definitions/Empty'
              security:
              - docknito: []
              x-amazon-apigateway-integration:
                type: http_proxy
                httpMethod: POST
                uri:
                  Fn::Sub: https://${VPCEndpointDNS}/Live/v1/custom-fee-packages
                responses:
                  default:
                    statusCode: '200'
                requestParameters:
                  integration.request.header.x-apigw-api-id:
                    Fn::Sub: "'${DrachmaAPIPrivateId}'"
                  integration.request.header.X-Request-ID: context.requestId
                  integration.request.header.X-AppClient-ID: context.authorizer.principalId
                  integration.request.header.client-id: context.authorizer.tenant_id
                  integration.request.header.X-Forwarded-For: context.identity.sourceIp
                passthroughBehavior: when_no_match
                connectionType: VPC_LINK
                connectionId:
                  Fn::ImportValue: VpcLinkIdglobal-redirect-api
          /charges/v1/custom-fee-packages/{proxy+}:
            get:
              produces:
              - application/json
              responses:
                '200':
                  description: 200 response
                  schema:
                    $ref: '#/definitions/Empty'
              security:
              - docknito: []
              x-amazon-apigateway-integration:
                type: http_proxy
                httpMethod: GET
                uri:
                  Fn::Sub: https://${VPCEndpointDNS}/Live/v1/custom-fee-packages/{proxy}
                responses:
                  default:
                    statusCode: '200'
                requestParameters:
                  integration.request.path.proxy: method.request.path.proxy
                  integration.request.header.x-apigw-api-id:
                    Fn::Sub: "'${DrachmaAPIPrivateId}'"
                  integration.request.header.X-Request-ID: context.requestId
                  integration.request.header.X-AppClient-ID: context.authorizer.principalId
                  integration.request.header.client-id: context.authorizer.tenant_id
                  integration.request.header.X-Forwarded-For: context.identity.sourceIp
                passthroughBehavior: when_no_match
                connectionType: VPC_LINK
                connectionId:
                  Fn::ImportValue: VpcLinkIdglobal-redirect-api
            delete:
              produces:
              - application/json
              responses:
                '200':
                  description: 200 response
                  schema:
                    $ref: '#/definitions/Empty'
              security:
              - docknito: []
              x-amazon-apigateway-integration:
                type: http_proxy
                httpMethod: DELETE
                uri:
                  Fn::Sub: https://${VPCEndpointDNS}/Live/v1/custom-fee-packages/{proxy}
                responses:
                  default:
                    statusCode: '200'
                requestParameters:
                  integration.request.path.proxy: method.request.path.proxy
                  integration.request.header.x-apigw-api-id:
                    Fn::Sub: "'${DrachmaAPIPrivateId}'"
                  integration.request.header.X-Request-ID: context.requestId
                  integration.request.header.X-AppClient-ID: context.authorizer.principalId
                  integration.request.header.client-id: context.authorizer.tenant_id
                  integration.request.header.X-Forwarded-For: context.identity.sourceIp
                passthroughBehavior: when_no_match
                connectionType: VPC_LINK
                connectionId:
                  Fn::ImportValue: VpcLinkIdglobal-redirect-api
          /charges/v1/component-types-link:
            get:
              produces:
              - application/json
              responses:
                '200':
                  description: 200 response
                  schema:
                    $ref: '#/definitions/Empty'
              security:
              - docknito: []
              x-amazon-apigateway-integration:
                type: http_proxy
                httpMethod: GET
                uri:
                  Fn::Sub: https://${VPCEndpointDNS}/Live/v1/component-types-link
                responses:
                  default:
                    statusCode: '200'
                requestParameters:
                  integration.request.header.x-apigw-api-id:
                    Fn::Sub: "'${DrachmaAPIPrivateId}'"
                  integration.request.header.X-Request-ID: context.requestId
                  integration.request.header.X-AppClient-ID: context.authorizer.principalId
                  integration.request.header.client-id: context.authorizer.tenant_id
                  integration.request.header.X-Forwarded-For: context.identity.sourceIp
                passthroughBehavior: when_no_match
                connectionType: VPC_LINK
                connectionId:
                  Fn::ImportValue: VpcLinkIdglobal-redirect-api
            post:
              produces:
              - application/json
              responses:
                '200':
                  description: 200 response
                  schema:
                    $ref: '#/definitions/Empty'
              security:
              - docknito: []
              x-amazon-apigateway-integration:
                type: http_proxy
                httpMethod: POST
                uri:
                  Fn::Sub: https://${VPCEndpointDNS}/Live/v1/component-types-link
                responses:
                  default:
                    statusCode: '200'
                requestParameters:
                  integration.request.header.x-apigw-api-id:
                    Fn::Sub: "'${DrachmaAPIPrivateId}'"
                  integration.request.header.X-Request-ID: context.requestId
                  integration.request.header.X-AppClient-ID: context.authorizer.principalId
                  integration.request.header.client-id: context.authorizer.tenant_id
                  integration.request.header.X-Forwarded-For: context.identity.sourceIp
                passthroughBehavior: when_no_match
                connectionType: VPC_LINK
                connectionId:
                  Fn::ImportValue: VpcLinkIdglobal-redirect-api
          /charges/v1/component-types-link/{proxy+}:
            delete:
              produces:
              - application/json
              responses:
                '200':
                  description: 200 response
                  schema:
                    $ref: '#/definitions/Empty'
              security:
              - docknito: []
              x-amazon-apigateway-integration:
                type: http_proxy
                httpMethod: DELETE
                uri:
                  Fn::Sub: https://${VPCEndpointDNS}/Live/v1/component-types-link/{proxy}
                responses:
                  default:
                    statusCode: '200'
                requestParameters:
                  integration.request.path.proxy: method.request.path.proxy
                  integration.request.header.x-apigw-api-id:
                    Fn::Sub: "'${DrachmaAPIPrivateId}'"
                  integration.request.header.X-Request-ID: context.requestId
                  integration.request.header.X-AppClient-ID: context.authorizer.principalId
                  integration.request.header.client-id: context.authorizer.tenant_id
                  integration.request.header.X-Forwarded-For: context.identity.sourceIp
                passthroughBehavior: when_no_match
                connectionType: VPC_LINK
                connectionId:
                  Fn::ImportValue: VpcLinkIdglobal-redirect-api
          /products/{proxy+}:
            get:
              produces:
              - application/json
              responses:
                '200':
                  description: 200 response
                  schema:
                    $ref: '#/definitions/Empty'
              security:
              - docknito: []
              x-amazon-apigateway-integration:
                type: http_proxy
                httpMethod: GET
                uri:
                  Fn::Sub: https://${VPCEndpointDNS}/Live/eitri/{proxy}
                responses:
                  default:
                    statusCode: '200'
                requestParameters:
                  integration.request.path.proxy: method.request.path.proxy
                  integration.request.header.x-apigw-api-id:
                    Fn::Sub: "'${ProductsAPIPrivateId}'"
                  integration.request.header.X-Request-ID: context.requestId
                  integration.request.header.X-AppClient-ID: context.authorizer.principalId
                  integration.request.header.client-id: context.authorizer.tenant_id
                  integration.request.header.X-Forwarded-For: context.identity.sourceIp
                passthroughBehavior: when_no_match
                connectionType: VPC_LINK
                connectionId:
                  Fn::ImportValue: VpcLinkIdglobal-redirect-api
            post:
              produces:
              - application/json
              responses:
                '200':
                  description: 200 response
                  schema:
                    $ref: '#/definitions/Empty'
              security:
              - docknito: []
              x-amazon-apigateway-integration:
                type: http_proxy
                httpMethod: POST
                uri:
                  Fn::Sub: https://${VPCEndpointDNS}/Live/eitri/{proxy}
                responses:
                  default:
                    statusCode: '200'
                requestParameters:
                  integration.request.path.proxy: method.request.path.proxy
                  integration.request.header.x-apigw-api-id:
                    Fn::Sub: "'${ProductsAPIPrivateId}'"
                  integration.request.header.X-Request-ID: context.requestId
                  integration.request.header.X-AppClient-ID: context.authorizer.principalId
                  integration.request.header.client-id: context.authorizer.tenant_id
                  integration.request.header.X-Forwarded-For: context.identity.sourceIp
                passthroughBehavior: when_no_match
                connectionType: VPC_LINK
                connectionId:
                  Fn::ImportValue: VpcLinkIdglobal-redirect-api
            delete:
              produces:
              - application/json
              responses:
                '200':
                  description: 200 response
                  schema:
                    $ref: '#/definitions/Empty'
              security:
              - docknito: []
              x-amazon-apigateway-integration:
                type: http_proxy
                httpMethod: DELETE
                uri:
                  Fn::Sub: https://${VPCEndpointDNS}/Live/eitri/{proxy}
                responses:
                  default:
                    statusCode: '200'
                requestParameters:
                  integration.request.path.proxy: method.request.path.proxy
                  integration.request.header.x-apigw-api-id:
                    Fn::Sub: "'${ProductsAPIPrivateId}'"
                  integration.request.header.X-Request-ID: context.requestId
                  integration.request.header.X-AppClient-ID: context.authorizer.principalId
                  integration.request.header.client-id: context.authorizer.tenant_id
                  integration.request.header.X-Forwarded-For: context.identity.sourceIp
                passthroughBehavior: when_no_match
                connectionType: VPC_LINK
                connectionId:
                  Fn::ImportValue: VpcLinkIdglobal-redirect-api
            options:
              produces:
              - application/json
              responses:
                '200':
                  description: 200 response
                  schema:
                    $ref: '#/definitions/Empty'
              security:
              - docknito: []
              x-amazon-apigateway-integration:
                type: http_proxy
                httpMethod: OPTIONS
                uri:
                  Fn::Sub: https://${VPCEndpointDNS}/Live/eitri/{proxy}
                responses:
                  default:
                    statusCode: '200'
                requestParameters:
                  integration.request.path.proxy: method.request.path.proxy
                  integration.request.header.x-apigw-api-id:
                    Fn::Sub: "'${ProductsAPIPrivateId}'"
                  integration.request.header.X-Request-ID: context.requestId
                  integration.request.header.X-AppClient-ID: context.authorizer.principalId
                  integration.request.header.client-id: context.authorizer.tenant_id
                  integration.request.header.X-Forwarded-For: context.identity.sourceIp
                passthroughBehavior: when_no_match
                connectionType: VPC_LINK
                connectionId:
                  Fn::ImportValue: VpcLinkIdglobal-redirect-api
            patch:
              produces:
              - application/json
              responses:
                '200':
                  description: 200 response
                  schema:
                    $ref: '#/definitions/Empty'
              security:
              - docknito: []
              x-amazon-apigateway-integration:
                type: http_proxy
                httpMethod: PATCH
                uri:
                  Fn::Sub: https://${VPCEndpointDNS}/Live/eitri/{proxy}
                responses:
                  default:
                    statusCode: '200'
                requestParameters:
                  integration.request.path.proxy: method.request.path.proxy
                  integration.request.header.x-apigw-api-id:
                    Fn::Sub: "'${ProductsAPIPrivateId}'"
                  integration.request.header.X-Request-ID: context.requestId
                  integration.request.header.X-AppClient-ID: context.authorizer.principalId
                  integration.request.header.client-id: context.authorizer.tenant_id
                  integration.request.header.X-Forwarded-For: context.identity.sourceIp
                passthroughBehavior: when_no_match
                connectionType: VPC_LINK
                connectionId:
                  Fn::ImportValue: VpcLinkIdglobal-redirect-api
            put:
              produces:
              - application/json
              responses:
                '200':
                  description: 200 response
                  schema:
                    $ref: '#/definitions/Empty'
              security:
              - docknito: []
              x-amazon-apigateway-integration:
                type: http_proxy
                httpMethod: PUT
                uri:
                  Fn::Sub: https://${VPCEndpointDNS}/Live/eitri/{proxy}
                responses:
                  default:
                    statusCode: '200'
                requestParameters:
                  integration.request.path.proxy: method.request.path.proxy
                  integration.request.header.x-apigw-api-id:
                    Fn::Sub: "'${ProductsAPIPrivateId}'"
                  integration.request.header.X-Request-ID: context.requestId
                  integration.request.header.X-AppClient-ID: context.authorizer.principalId
                  integration.request.header.client-id: context.authorizer.tenant_id
                  integration.request.header.X-Forwarded-For: context.identity.sourceIp
                passthroughBehavior: when_no_match
                connectionType: VPC_LINK
                connectionId:
                  Fn::ImportValue: VpcLinkIdglobal-redirect-api
            head:
              produces:
              - application/json
              responses:
                '200':
                  description: 200 response
                  schema:
                    $ref: '#/definitions/Empty'
              security:
              - docknito: []
              x-amazon-apigateway-integration:
                type: http_proxy
                httpMethod: HEAD
                uri:
                  Fn::Sub: https://${VPCEndpointDNS}/Live/eitri/{proxy}
                responses:
                  default:
                    statusCode: '200'
                requestParameters:
                  integration.request.path.proxy: method.request.path.proxy
                  integration.request.header.x-apigw-api-id:
                    Fn::Sub: "'${ProductsAPIPrivateId}'"
                  integration.request.header.X-Request-ID: context.requestId
                  integration.request.header.X-AppClient-ID: context.authorizer.principalId
                  integration.request.header.client-id: context.authorizer.tenant_id
                  integration.request.header.X-Forwarded-For: context.identity.sourceIp
                passthroughBehavior: when_no_match
                connectionType: VPC_LINK
                connectionId:
                  Fn::ImportValue: VpcLinkIdglobal-redirect-api
          /cards/{proxy+}:
            get:
              produces:
              - application/json
              responses:
                '200':
                  description: 200 response
                  schema:
                    $ref: '#/definitions/Empty'
                '422':
                  description: Unprocessable Entity
              security:
              - docknito: []
              x-amazon-apigateway-integration:
                type: http_proxy
                httpMethod: GET
                uri:
                  Fn::Sub: https://${VPCEndpointDNS}/Live/{proxy}
                responses:
                  default:
                    statusCode: '200'
                requestParameters:
                  integration.request.path.proxy: method.request.path.proxy
                  integration.request.header.x-apigw-api-id:
                    Fn::Sub: "'${CardsAPIPrivateId}'"
                  integration.request.header.X-Request-ID: context.requestId
                  integration.request.header.X-AppClient-ID: context.authorizer.principalId
                  integration.request.header.X-Client-ID: context.authorizer.tenant_id
                  integration.request.header.X-Forwarded-For: context.identity.sourceIp
                passthroughBehavior: when_no_match
                connectionType: VPC_LINK
                connectionId:
                  Fn::ImportValue: VpcLinkIdglobal-redirect-api
            post:
              produces:
              - application/json
              responses:
                '200':
                  description: 200 response
                  schema:
                    $ref: '#/definitions/Empty'
                '422':
                  description: Unprocessable Entity
              security:
              - docknito: []
              x-amazon-apigateway-integration:
                type: http_proxy
                httpMethod: POST
                uri:
                  Fn::Sub: https://${VPCEndpointDNS}/Live/{proxy}
                responses:
                  default:
                    statusCode: '200'
                requestParameters:
                  integration.request.path.proxy: method.request.path.proxy
                  integration.request.header.x-apigw-api-id:
                    Fn::Sub: "'${CardsAPIPrivateId}'"
                  integration.request.header.X-Request-ID: context.requestId
                  integration.request.header.X-AppClient-ID: context.authorizer.principalId
                  integration.request.header.X-Client-ID: context.authorizer.tenant_id
                  integration.request.header.X-Forwarded-For: context.identity.sourceIp
                passthroughBehavior: when_no_match
                connectionType: VPC_LINK
                connectionId:
                  Fn::ImportValue: VpcLinkIdglobal-redirect-api
            delete:
              produces:
              - application/json
              responses:
                '200':
                  description: 200 response
                  schema:
                    $ref: '#/definitions/Empty'
                '422':
                  description: Unprocessable Entity
              security:
              - docknito: []
              x-amazon-apigateway-integration:
                type: http_proxy
                httpMethod: DELETE
                uri:
                  Fn::Sub: https://${VPCEndpointDNS}/Live/{proxy}
                responses:
                  default:
                    statusCode: '200'
                requestParameters:
                  integration.request.path.proxy: method.request.path.proxy
                  integration.request.header.x-apigw-api-id:
                    Fn::Sub: "'${CardsAPIPrivateId}'"
                  integration.request.header.X-Request-ID: context.requestId
                  integration.request.header.X-AppClient-ID: context.authorizer.principalId
                  integration.request.header.X-Client-ID: context.authorizer.tenant_id
                  integration.request.header.X-Forwarded-For: context.identity.sourceIp
                passthroughBehavior: when_no_match
                connectionType: VPC_LINK
                connectionId:
                  Fn::ImportValue: VpcLinkIdglobal-redirect-api
            options:
              produces:
              - application/json
              responses:
                '200':
                  description: 200 response
                  schema:
                    $ref: '#/definitions/Empty'
                '422':
                  description: Unprocessable Entity
              security:
              - docknito: []
              x-amazon-apigateway-integration:
                type: http_proxy
                httpMethod: OPTIONS
                uri:
                  Fn::Sub: https://${VPCEndpointDNS}/Live/{proxy}
                responses:
                  default:
                    statusCode: '200'
                requestParameters:
                  integration.request.path.proxy: method.request.path.proxy
                  integration.request.header.x-apigw-api-id:
                    Fn::Sub: "'${CardsAPIPrivateId}'"
                  integration.request.header.X-Request-ID: context.requestId
                  integration.request.header.X-AppClient-ID: context.authorizer.principalId
                  integration.request.header.X-Client-ID: context.authorizer.tenant_id
                  integration.request.header.X-Forwarded-For: context.identity.sourceIp
                passthroughBehavior: when_no_match
                connectionType: VPC_LINK
                connectionId:
                  Fn::ImportValue: VpcLinkIdglobal-redirect-api
            patch:
              produces:
              - application/json
              responses:
                '200':
                  description: 200 response
                  schema:
                    $ref: '#/definitions/Empty'
                '422':
                  description: Unprocessable Entity
              security:
              - docknito: []
              x-amazon-apigateway-integration:
                type: http_proxy
                httpMethod: PATCH
                uri:
                  Fn::Sub: https://${VPCEndpointDNS}/Live/{proxy}
                responses:
                  default:
                    statusCode: '200'
                requestParameters:
                  integration.request.path.proxy: method.request.path.proxy
                  integration.request.header.x-apigw-api-id:
                    Fn::Sub: "'${CardsAPIPrivateId}'"
                  integration.request.header.X-Request-ID: context.requestId
                  integration.request.header.X-AppClient-ID: context.authorizer.principalId
                  integration.request.header.X-Client-ID: context.authorizer.tenant_id
                  integration.request.header.X-Forwarded-For: context.identity.sourceIp
                passthroughBehavior: when_no_match
                connectionType: VPC_LINK
                connectionId:
                  Fn::ImportValue: VpcLinkIdglobal-redirect-api
            put:
              produces:
              - application/json
              responses:
                '200':
                  description: 200 response
                  schema:
                    $ref: '#/definitions/Empty'
                '422':
                  description: Unprocessable Entity
              security:
              - docknito: []
              x-amazon-apigateway-integration:
                type: http_proxy
                httpMethod: PUT
                uri:
                  Fn::Sub: https://${VPCEndpointDNS}/Live/{proxy}
                responses:
                  default:
                    statusCode: '200'
                requestParameters:
                  integration.request.path.proxy: method.request.path.proxy
                  integration.request.header.x-apigw-api-id:
                    Fn::Sub: "'${CardsAPIPrivateId}'"
                  integration.request.header.X-Request-ID: context.requestId
                  integration.request.header.X-AppClient-ID: context.authorizer.principalId
                  integration.request.header.X-Client-ID: context.authorizer.tenant_id
                  integration.request.header.X-Forwarded-For: context.identity.sourceIp
                passthroughBehavior: when_no_match
                connectionType: VPC_LINK
                connectionId:
                  Fn::ImportValue: VpcLinkIdglobal-redirect-api
            head:
              produces:
              - application/json
              responses:
                '200':
                  description: 200 response
                  schema:
                    $ref: '#/definitions/Empty'
                '422':
                  description: Unprocessable Entity
              security:
              - docknito: []
              x-amazon-apigateway-integration:
                type: http_proxy
                httpMethod: HEAD
                uri:
                  Fn::Sub: https://${VPCEndpointDNS}/Live/{proxy}
                responses:
                  default:
                    statusCode: '200'
                requestParameters:
                  integration.request.path.proxy: method.request.path.proxy
                  integration.request.header.x-apigw-api-id:
                    Fn::Sub: "'${CardsAPIPrivateId}'"
                  integration.request.header.X-Request-ID: context.requestId
                  integration.request.header.X-AppClient-ID: context.authorizer.principalId
                  integration.request.header.X-Client-ID: context.authorizer.tenant_id
                  integration.request.header.X-Forwarded-For: context.identity.sourceIp
                passthroughBehavior: when_no_match
                connectionType: VPC_LINK
                connectionId:
                  Fn::ImportValue: VpcLinkIdglobal-redirect-api
          /embossing/{proxy+}:
            get:
              produces:
              - application/json
              responses:
                '200':
                  description: 200 response
                  schema:
                    $ref: '#/definitions/Empty'
                '422':
                  description: Unprocessable Entity
              security:
              - docknito: []
              x-amazon-apigateway-integration:
                type: http_proxy
                httpMethod: GET
                uri:
                  Fn::Sub: https://${VPCEndpointDNS}/Live/{proxy}
                responses:
                  default:
                    statusCode: '200'
                requestParameters:
                  integration.request.path.proxy: method.request.path.proxy
                  integration.request.header.x-apigw-api-id:
                    Fn::Sub: "'${EmbossingAPIPrivateId}'"
                  integration.request.header.X-Request-ID: context.requestId
                  integration.request.header.X-AppClient-ID: context.authorizer.principalId
                  integration.request.header.X-Client-ID: context.authorizer.tenant_id
                  integration.request.header.X-Embosser-ID: context.authorizer.embosser_id
                  integration.request.header.X-Forwarded-For: context.identity.sourceIp
                passthroughBehavior: when_no_match
                connectionType: VPC_LINK
                connectionId:
                  Fn::ImportValue: VpcLinkIdglobal-redirect-api
            post:
              produces:
              - application/json
              responses:
                '200':
                  description: 200 response
                  schema:
                    $ref: '#/definitions/Empty'
                '422':
                  description: Unprocessable Entity
              security:
              - docknito: []
              x-amazon-apigateway-integration:
                type: http_proxy
                httpMethod: POST
                uri:
                  Fn::Sub: https://${VPCEndpointDNS}/Live/{proxy}
                responses:
                  default:
                    statusCode: '200'
                requestParameters:
                  integration.request.path.proxy: method.request.path.proxy
                  integration.request.header.x-apigw-api-id:
                    Fn::Sub: "'${EmbossingAPIPrivateId}'"
                  integration.request.header.X-Request-ID: context.requestId
                  integration.request.header.X-AppClient-ID: context.authorizer.principalId
                  integration.request.header.X-Client-ID: context.authorizer.tenant_id
                  integration.request.header.X-Embosser-ID: context.authorizer.embosser_id
                  integration.request.header.X-Forwarded-For: context.identity.sourceIp
                passthroughBehavior: when_no_match
                connectionType: VPC_LINK
                connectionId:
                  Fn::ImportValue: VpcLinkIdglobal-redirect-api
            delete:
              produces:
              - application/json
              responses:
                '200':
                  description: 200 response
                  schema:
                    $ref: '#/definitions/Empty'
                '422':
                  description: Unprocessable Entity
              security:
              - docknito: []
              x-amazon-apigateway-integration:
                type: http_proxy
                httpMethod: DELETE
                uri:
                  Fn::Sub: https://${VPCEndpointDNS}/Live/{proxy}
                responses:
                  default:
                    statusCode: '200'
                requestParameters:
                  integration.request.path.proxy: method.request.path.proxy
                  integration.request.header.x-apigw-api-id:
                    Fn::Sub: "'${EmbossingAPIPrivateId}'"
                  integration.request.header.X-Request-ID: context.requestId
                  integration.request.header.X-AppClient-ID: context.authorizer.principalId
                  integration.request.header.X-Client-ID: context.authorizer.tenant_id
                  integration.request.header.X-Embosser-ID: context.authorizer.embosser_id
                  integration.request.header.X-Forwarded-For: context.identity.sourceIp
                passthroughBehavior: when_no_match
                connectionType: VPC_LINK
                connectionId:
                  Fn::ImportValue: VpcLinkIdglobal-redirect-api
            options:
              produces:
              - application/json
              responses:
                '200':
                  description: 200 response
                  schema:
                    $ref: '#/definitions/Empty'
                '422':
                  description: Unprocessable Entity
              security:
              - docknito: []
              x-amazon-apigateway-integration:
                type: http_proxy
                httpMethod: OPTIONS
                uri:
                  Fn::Sub: https://${VPCEndpointDNS}/Live/{proxy}
                responses:
                  default:
                    statusCode: '200'
                requestParameters:
                  integration.request.path.proxy: method.request.path.proxy
                  integration.request.header.x-apigw-api-id:
                    Fn::Sub: "'${EmbossingAPIPrivateId}'"
                  integration.request.header.X-Request-ID: context.requestId
                  integration.request.header.X-AppClient-ID: context.authorizer.principalId
                  integration.request.header.X-Client-ID: context.authorizer.tenant_id
                  integration.request.header.X-Embosser-ID: context.authorizer.embosser_id
                  integration.request.header.X-Forwarded-For: context.identity.sourceIp
                passthroughBehavior: when_no_match
                connectionType: VPC_LINK
                connectionId:
                  Fn::ImportValue: VpcLinkIdglobal-redirect-api
            patch:
              produces:
              - application/json
              responses:
                '200':
                  description: 200 response
                  schema:
                    $ref: '#/definitions/Empty'
                '422':
                  description: Unprocessable Entity
              security:
              - docknito: []
              x-amazon-apigateway-integration:
                type: http_proxy
                httpMethod: PATCH
                uri:
                  Fn::Sub: https://${VPCEndpointDNS}/Live/{proxy}
                responses:
                  default:
                    statusCode: '200'
                requestParameters:
                  integration.request.path.proxy: method.request.path.proxy
                  integration.request.header.x-apigw-api-id:
                    Fn::Sub: "'${EmbossingAPIPrivateId}'"
                  integration.request.header.X-Request-ID: context.requestId
                  integration.request.header.X-AppClient-ID: context.authorizer.principalId
                  integration.request.header.X-Client-ID: context.authorizer.tenant_id
                  integration.request.header.X-Embosser-ID: context.authorizer.embosser_id
                  integration.request.header.X-Forwarded-For: context.identity.sourceIp
                passthroughBehavior: when_no_match
                connectionType: VPC_LINK
                connectionId:
                  Fn::ImportValue: VpcLinkIdglobal-redirect-api
            put:
              produces:
              - application/json
              responses:
                '200':
                  description: 200 response
                  schema:
                    $ref: '#/definitions/Empty'
                '422':
                  description: Unprocessable Entity
              security:
              - docknito: []
              x-amazon-apigateway-integration:
                type: http_proxy
                httpMethod: PUT
                uri:
                  Fn::Sub: https://${VPCEndpointDNS}/Live/{proxy}
                responses:
                  default:
                    statusCode: '200'
                requestParameters:
                  integration.request.path.proxy: method.request.path.proxy
                  integration.request.header.x-apigw-api-id:
                    Fn::Sub: "'${EmbossingAPIPrivateId}'"
                  integration.request.header.X-Request-ID: context.requestId
                  integration.request.header.X-AppClient-ID: context.authorizer.principalId
                  integration.request.header.X-Client-ID: context.authorizer.tenant_id
                  integration.request.header.X-Embosser-ID: context.authorizer.embosser_id
                  integration.request.header.X-Forwarded-For: context.identity.sourceIp
                passthroughBehavior: when_no_match
                connectionType: VPC_LINK
                connectionId:
                  Fn::ImportValue: VpcLinkIdglobal-redirect-api
            head:
              produces:
              - application/json
              responses:
                '200':
                  description: 200 response
                  schema:
                    $ref: '#/definitions/Empty'
                '422':
                  description: Unprocessable Entity
              security:
              - docknito: []
              x-amazon-apigateway-integration:
                type: http_proxy
                httpMethod: HEAD
                uri:
                  Fn::Sub: https://${VPCEndpointDNS}/Live/{proxy}
                responses:
                  default:
                    statusCode: '200'
                requestParameters:
                  integration.request.path.proxy: method.request.path.proxy
                  integration.request.header.x-apigw-api-id:
                    Fn::Sub: "'${EmbossingAPIPrivateId}'"
                  integration.request.header.X-Request-ID: context.requestId
                  integration.request.header.X-AppClient-ID: context.authorizer.principalId
                  integration.request.header.X-Client-ID: context.authorizer.tenant_id
                  integration.request.header.X-Embosser-ID: context.authorizer.embosser_id
                  integration.request.header.X-Forwarded-For: context.identity.sourceIp
                passthroughBehavior: when_no_match
                connectionType: VPC_LINK
                connectionId:
                  Fn::ImportValue: VpcLinkIdglobal-redirect-api
          /person/{proxy+}:
            get:
              produces:
              - application/json
              responses:
                '200':
                  description: 200 response
                  schema:
                    $ref: '#/definitions/Empty'
              security:
              - docknito: []
              x-amazon-apigateway-integration:
                type: http_proxy
                httpMethod: GET
                uri:
                  Fn::Sub: https://${VPCEndpointDNS}/Live/person/{proxy}
                responses:
                  default:
                    statusCode: '200'
                requestParameters:
                  integration.request.path.proxy: method.request.path.proxy
                  integration.request.header.x-apigw-api-id:
                    Fn::Sub: "'${PersonAPIPrivateId}'"
                  integration.request.header.is-public: "'true'"
                  integration.request.header.X-Request-ID: context.requestId
                  integration.request.header.X-AppClient-ID: context.authorizer.principalId
                  integration.request.header.client-id: context.authorizer.tenant_id
                  integration.request.header.tenant-id: context.authorizer.tenant_id
                  integration.request.header.X-Forwarded-For: context.identity.sourceIp
                passthroughBehavior: when_no_match
                connectionType: VPC_LINK
                connectionId:
                  Fn::ImportValue: VpcLinkIdglobal-redirect-api
            post:
              produces:
              - application/json
              responses:
                '200':
                  description: 200 response
                  schema:
                    $ref: '#/definitions/Empty'
              security:
              - docknito: []
              x-amazon-apigateway-integration:
                type: http_proxy
                httpMethod: POST
                uri:
                  Fn::Sub: https://${VPCEndpointDNS}/Live/person/{proxy}
                responses:
                  default:
                    statusCode: '200'
                requestParameters:
                  integration.request.path.proxy: method.request.path.proxy
                  integration.request.header.x-apigw-api-id:
                    Fn::Sub: "'${PersonAPIPrivateId}'"
                  integration.request.header.is-public: "'true'"
                  integration.request.header.X-Request-ID: context.requestId
                  integration.request.header.X-AppClient-ID: context.authorizer.principalId
                  integration.request.header.client-id: context.authorizer.tenant_id
                  integration.request.header.tenant-id: context.authorizer.tenant_id
                  integration.request.header.X-Forwarded-For: context.identity.sourceIp
                passthroughBehavior: when_no_match
                connectionType: VPC_LINK
                connectionId:
                  Fn::ImportValue: VpcLinkIdglobal-redirect-api
            delete:
              produces:
              - application/json
              responses:
                '200':
                  description: 200 response
                  schema:
                    $ref: '#/definitions/Empty'
              security:
              - docknito: []
              x-amazon-apigateway-integration:
                type: http_proxy
                httpMethod: DELETE
                uri:
                  Fn::Sub: https://${VPCEndpointDNS}/Live/person/{proxy}
                responses:
                  default:
                    statusCode: '200'
                requestParameters:
                  integration.request.path.proxy: method.request.path.proxy
                  integration.request.header.x-apigw-api-id:
                    Fn::Sub: "'${PersonAPIPrivateId}'"
                  integration.request.header.is-public: "'true'"
                  integration.request.header.X-Request-ID: context.requestId
                  integration.request.header.X-AppClient-ID: context.authorizer.principalId
                  integration.request.header.client-id: context.authorizer.tenant_id
                  integration.request.header.tenant-id: context.authorizer.tenant_id
                  integration.request.header.X-Forwarded-For: context.identity.sourceIp
                passthroughBehavior: when_no_match
                connectionType: VPC_LINK
                connectionId:
                  Fn::ImportValue: VpcLinkIdglobal-redirect-api
            options:
              produces:
              - application/json
              responses:
                '200':
                  description: 200 response
                  schema:
                    $ref: '#/definitions/Empty'
              security:
              - docknito: []
              x-amazon-apigateway-integration:
                type: http_proxy
                httpMethod: OPTIONS
                uri:
                  Fn::Sub: https://${VPCEndpointDNS}/Live/person/{proxy}
                responses:
                  default:
                    statusCode: '200'
                requestParameters:
                  integration.request.path.proxy: method.request.path.proxy
                  integration.request.header.x-apigw-api-id:
                    Fn::Sub: "'${PersonAPIPrivateId}'"
                  integration.request.header.is-public: "'true'"
                  integration.request.header.X-Request-ID: context.requestId
                  integration.request.header.X-AppClient-ID: context.authorizer.principalId
                  integration.request.header.client-id: context.authorizer.tenant_id
                  integration.request.header.tenant-id: context.authorizer.tenant_id
                  integration.request.header.X-Forwarded-For: context.identity.sourceIp
                passthroughBehavior: when_no_match
                connectionType: VPC_LINK
                connectionId:
                  Fn::ImportValue: VpcLinkIdglobal-redirect-api
            patch:
              produces:
              - application/json
              responses:
                '200':
                  description: 200 response
                  schema:
                    $ref: '#/definitions/Empty'
              security:
              - docknito: []
              x-amazon-apigateway-integration:
                type: http_proxy
                httpMethod: PATCH
                uri:
                  Fn::Sub: https://${VPCEndpointDNS}/Live/person/{proxy}
                responses:
                  default:
                    statusCode: '200'
                requestParameters:
                  integration.request.path.proxy: method.request.path.proxy
                  integration.request.header.x-apigw-api-id:
                    Fn::Sub: "'${PersonAPIPrivateId}'"
                  integration.request.header.is-public: "'true'"
                  integration.request.header.X-Request-ID: context.requestId
                  integration.request.header.X-AppClient-ID: context.authorizer.principalId
                  integration.request.header.client-id: context.authorizer.tenant_id
                  integration.request.header.tenant-id: context.authorizer.tenant_id
                  integration.request.header.X-Forwarded-For: context.identity.sourceIp
                passthroughBehavior: when_no_match
                connectionType: VPC_LINK
                connectionId:
                  Fn::ImportValue: VpcLinkIdglobal-redirect-api
            put:
              produces:
              - application/json
              responses:
                '200':
                  description: 200 response
                  schema:
                    $ref: '#/definitions/Empty'
              security:
              - docknito: []
              x-amazon-apigateway-integration:
                type: http_proxy
                httpMethod: PUT
                uri:
                  Fn::Sub: https://${VPCEndpointDNS}/Live/person/{proxy}
                responses:
                  default:
                    statusCode: '200'
                requestParameters:
                  integration.request.path.proxy: method.request.path.proxy
                  integration.request.header.x-apigw-api-id:
                    Fn::Sub: "'${PersonAPIPrivateId}'"
                  integration.request.header.is-public: "'true'"
                  integration.request.header.X-Request-ID: context.requestId
                  integration.request.header.X-AppClient-ID: context.authorizer.principalId
                  integration.request.header.client-id: context.authorizer.tenant_id
                  integration.request.header.tenant-id: context.authorizer.tenant_id
                  integration.request.header.X-Forwarded-For: context.identity.sourceIp
                passthroughBehavior: when_no_match
                connectionType: VPC_LINK
                connectionId:
                  Fn::ImportValue: VpcLinkIdglobal-redirect-api
            head:
              produces:
              - application/json
              responses:
                '200':
                  description: 200 response
                  schema:
                    $ref: '#/definitions/Empty'
              security:
              - docknito: []
              x-amazon-apigateway-integration:
                type: http_proxy
                httpMethod: HEAD
                uri:
                  Fn::Sub: https://${VPCEndpointDNS}/Live/person/{proxy}
                responses:
                  default:
                    statusCode: '200'
                requestParameters:
                  integration.request.path.proxy: method.request.path.proxy
                  integration.request.header.x-apigw-api-id:
                    Fn::Sub: "'${PersonAPIPrivateId}'"
                  integration.request.header.is-public: "'true'"
                  integration.request.header.X-Request-ID: context.requestId
                  integration.request.header.X-AppClient-ID: context.authorizer.principalId
                  integration.request.header.client-id: context.authorizer.tenant_id
                  integration.request.header.tenant-id: context.authorizer.tenant_id
                  integration.request.header.X-Forwarded-For: context.identity.sourceIp
                passthroughBehavior: when_no_match
                connectionType: VPC_LINK
                connectionId:
                  Fn::ImportValue: VpcLinkIdglobal-redirect-api
          /abu/{proxy+}:
            get:
              produces:
              - application/json
              responses:
                '200':
                  description: 200 response
                  schema:
                    $ref: '#/definitions/Empty'
              security:
              - docknito: []
              x-amazon-apigateway-integration:
                type: http_proxy
                httpMethod: GET
                uri:
                  Fn::Sub: https://${VPCEndpointDNS}/Live/{proxy}
                responses:
                  default:
                    statusCode: '200'
                requestParameters:
                  integration.request.path.proxy: method.request.path.proxy
                  integration.request.header.x-apigw-api-id:
                    Fn::Sub: "'${AbuAPIPrivateId}'"
                  integration.request.header.X-Request-ID: context.requestId
                  integration.request.header.X-AppClient-ID: context.authorizer.principalId
                  integration.request.header.X-Client-ID: context.authorizer.tenant_id
                  integration.request.header.X-Forwarded-For: context.identity.sourceIp
                passthroughBehavior: when_no_match
                connectionType: VPC_LINK
                connectionId:
                  Fn::ImportValue: VpcLinkIdglobal-redirect-api
            post:
              produces:
              - application/json
              responses:
                '200':
                  description: 200 response
                  schema:
                    $ref: '#/definitions/Empty'
              security:
              - docknito: []
              x-amazon-apigateway-integration:
                type: http_proxy
                httpMethod: POST
                uri:
                  Fn::Sub: https://${VPCEndpointDNS}/Live/{proxy}
                responses:
                  default:
                    statusCode: '200'
                requestParameters:
                  integration.request.path.proxy: method.request.path.proxy
                  integration.request.header.x-apigw-api-id:
                    Fn::Sub: "'${AbuAPIPrivateId}'"
                  integration.request.header.X-Request-ID: context.requestId
                  integration.request.header.X-AppClient-ID: context.authorizer.principalId
                  integration.request.header.X-Client-ID: context.authorizer.tenant_id
                  integration.request.header.X-Forwarded-For: context.identity.sourceIp
                passthroughBehavior: when_no_match
                connectionType: VPC_LINK
                connectionId:
                  Fn::ImportValue: VpcLinkIdglobal-redirect-api
            delete:
              produces:
              - application/json
              responses:
                '200':
                  description: 200 response
                  schema:
                    $ref: '#/definitions/Empty'
              security:
              - docknito: []
              x-amazon-apigateway-integration:
                type: http_proxy
                httpMethod: DELETE
                uri:
                  Fn::Sub: https://${VPCEndpointDNS}/Live/{proxy}
                responses:
                  default:
                    statusCode: '200'
                requestParameters:
                  integration.request.path.proxy: method.request.path.proxy
                  integration.request.header.x-apigw-api-id:
                    Fn::Sub: "'${AbuAPIPrivateId}'"
                  integration.request.header.X-Request-ID: context.requestId
                  integration.request.header.X-AppClient-ID: context.authorizer.principalId
                  integration.request.header.X-Client-ID: context.authorizer.tenant_id
                  integration.request.header.X-Forwarded-For: context.identity.sourceIp
                passthroughBehavior: when_no_match
                connectionType: VPC_LINK
                connectionId:
                  Fn::ImportValue: VpcLinkIdglobal-redirect-api
            options:
              produces:
              - application/json
              responses:
                '200':
                  description: 200 response
                  schema:
                    $ref: '#/definitions/Empty'
              security:
              - docknito: []
              x-amazon-apigateway-integration:
                type: http_proxy
                httpMethod: OPTIONS
                uri:
                  Fn::Sub: https://${VPCEndpointDNS}/Live/{proxy}
                responses:
                  default:
                    statusCode: '200'
                requestParameters:
                  integration.request.path.proxy: method.request.path.proxy
                  integration.request.header.x-apigw-api-id:
                    Fn::Sub: "'${AbuAPIPrivateId}'"
                  integration.request.header.X-Request-ID: context.requestId
                  integration.request.header.X-AppClient-ID: context.authorizer.principalId
                  integration.request.header.X-Client-ID: context.authorizer.tenant_id
                  integration.request.header.X-Forwarded-For: context.identity.sourceIp
                passthroughBehavior: when_no_match
                connectionType: VPC_LINK
                connectionId:
                  Fn::ImportValue: VpcLinkIdglobal-redirect-api
            patch:
              produces:
              - application/json
              responses:
                '200':
                  description: 200 response
                  schema:
                    $ref: '#/definitions/Empty'
              security:
              - docknito: []
              x-amazon-apigateway-integration:
                type: http_proxy
                httpMethod: PATCH
                uri:
                  Fn::Sub: https://${VPCEndpointDNS}/Live/{proxy}
                responses:
                  default:
                    statusCode: '200'
                requestParameters:
                  integration.request.path.proxy: method.request.path.proxy
                  integration.request.header.x-apigw-api-id:
                    Fn::Sub: "'${AbuAPIPrivateId}'"
                  integration.request.header.X-Request-ID: context.requestId
                  integration.request.header.X-AppClient-ID: context.authorizer.principalId
                  integration.request.header.X-Client-ID: context.authorizer.tenant_id
                  integration.request.header.X-Forwarded-For: context.identity.sourceIp
                passthroughBehavior: when_no_match
                connectionType: VPC_LINK
                connectionId:
                  Fn::ImportValue: VpcLinkIdglobal-redirect-api
            put:
              produces:
              - application/json
              responses:
                '200':
                  description: 200 response
                  schema:
                    $ref: '#/definitions/Empty'
              security:
              - docknito: []
              x-amazon-apigateway-integration:
                type: http_proxy
                httpMethod: PUT
                uri:
                  Fn::Sub: https://${VPCEndpointDNS}/Live/{proxy}
                responses:
                  default:
                    statusCode: '200'
                requestParameters:
                  integration.request.path.proxy: method.request.path.proxy
                  integration.request.header.x-apigw-api-id:
                    Fn::Sub: "'${AbuAPIPrivateId}'"
                  integration.request.header.X-Request-ID: context.requestId
                  integration.request.header.X-AppClient-ID: context.authorizer.principalId
                  integration.request.header.X-Client-ID: context.authorizer.tenant_id
                  integration.request.header.X-Forwarded-For: context.identity.sourceIp
                passthroughBehavior: when_no_match
                connectionType: VPC_LINK
                connectionId:
                  Fn::ImportValue: VpcLinkIdglobal-redirect-api
            head:
              produces:
              - application/json
              responses:
                '200':
                  description: 200 response
                  schema:
                    $ref: '#/definitions/Empty'
              security:
              - docknito: []
              x-amazon-apigateway-integration:
                type: http_proxy
                httpMethod: HEAD
                uri:
                  Fn::Sub: https://${VPCEndpointDNS}/Live/{proxy}
                responses:
                  default:
                    statusCode: '200'
                requestParameters:
                  integration.request.path.proxy: method.request.path.proxy
                  integration.request.header.x-apigw-api-id:
                    Fn::Sub: "'${AbuAPIPrivateId}'"
                  integration.request.header.X-Request-ID: context.requestId
                  integration.request.header.X-AppClient-ID: context.authorizer.principalId
                  integration.request.header.X-Client-ID: context.authorizer.tenant_id
                  integration.request.header.X-Forwarded-For: context.identity.sourceIp
                passthroughBehavior: when_no_match
                connectionType: VPC_LINK
                connectionId:
                  Fn::ImportValue: VpcLinkIdglobal-redirect-api
        x-amazon-apigateway-api-key-source: AUTHORIZER
        securityDefinitions:
          docknito:
            type: apiKey
            name: Unused
            in: header
            x-amazon-apigateway-authtype: custom
            x-amazon-apigateway-authorizer:
              authorizerUri:
                Fn::Sub: arn:aws:apigateway:${DocknitoRegion}:lambda:path/2015-03-31/functions/arn:aws:lambda:${DocknitoRegion}:${DocknitoAccount}:function:docknito-authorization/invocations
              authorizerResultTtlInSeconds: 600
              identitySource: method.request.header.Authorization, context.path, context.httpMethod,  context.identity.sourceIp
              type: request
        definitions:
          Empty:
            type: object
            title: Empty Schema
        x-amazon-apigateway-gateway-responses:
          UNAUTHORIZED:
            statusCode: 401
            responseTemplates:
              application/json: '{"error": { "id": "$context.requestId", "description":
                "Unauthorized", "code": "401"}}'
          ACCESS_DENIED:
            statusCode: 403
            responseTemplates:
              application/json: '{"error": { "id": "$context.requestId", "description":
                "Forbidden", "code": "403"}}'
          DEFAULT_4XX:
            statusCode: 404
            responseTemplates:
              application/json: '{"error": { "id": "$context.requestId", "description":
                "Resource not found", "code": "404"}}'
          DEFAULT_5XX:
            statusCode: 500
            responseTemplates:
              application/json: '{"error": { "id": "$context.requestId", "description":
                "Internal server error", "code": "500"}}'
          THROTTLED:
            statusCode: 429
            responseTemplates:
              application/json: '{"error": { "id": "$context.requestId", "description":
                "Too many requests", "code": "429"}}'
  Deployment:
    Type: AWS::ApiGateway::Deployment
    Properties:
      RestApiId:
        Ref: GlobalAPIGateway
  GlobalAPIBaseMapping:
    Type: AWS::ApiGateway::BasePathMapping
    Properties:
      DomainName:
        Fn::FindInMap:
        - Network
        - Ref: Env
        - DomainName
      RestApiId:
        Ref: GlobalAPIGateway
      Stage:
        Ref: GlobalAPIGateway.Stage