AWSTemplateFormatVersion: '2010-09-09'
Description: loadbalancer
Transform: AWS::Serverless-2016-10-31

Parameters:
  SubnetIds:
    Type: 'List<String>'
  VpcId:
    Type: String
  LoadBalancerType:
    Type: String
    Default: network
    AllowedValues:
      - network
      - application
      - gateway
  Scheme:
    Type: String
    Default: internal
    AllowedValues:
      - internal
      - internet-facing
  IpAddressType:
    Type: String
    Default: ipv4
    AllowedValues:
      - ipv4
      - dualstack
  WebACLArn:
    Type: String
    Default: NoValue
  Env:
    Type: String
  Service:
    Type: String
  Squad:
    Type: String
  Slack:
    Type: String
  Email:
    Type: String
  LoadBalancerName:
    Type: String
  HostedZoneId:
    Type: String
  DomainName:
    Type: String

Conditions:
  isAlb: !Equals [!Ref LoadBalancerType, application]

Resources:
  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      IpAddressType: !Ref IpAddressType
      Name: !Ref LoadBalancerName
      Scheme: !Ref Scheme
      Subnets: !Ref SubnetIds
      Type: !Ref LoadBalancerType
      LoadBalancerAttributes:
        - Key: load_balancing.cross_zone.enabled
          Value: true
      Tags:
        - Key: Name
          Value: !Sub ${LoadBalancerName}-lb
        -
          Key: env
          Value: !Ref Env
        -
          Key: service  
          Value: !Ref Service
        -
          Key: stack
          Value: !Sub ${AWS::StackName}
        -
          Key: squad
          Value: !Ref Squad
        -
          Key: slack
          Value: !Ref Slack
        -
          Key: email
          Value: !Ref Email
        -
          Key: resource
          Value: load-balancer

  #WebACLAssociation:
  #  Condition: isAlb
  #  Type: AWS::WAFv2::WebACLAssociation
  #  Properties:
  #    ResourceArn: !Ref LoadBalancer
  #    WebACLArn: !Ref WebACLArn

  RecordSet:
    Type: AWS::Route53::RecordSet
    DependsOn: LoadBalancer
    Properties:
      Type: A
      HostedZoneId: !Ref HostedZoneId
      Name: !Ref DomainName
      AliasTarget:
        HostedZoneId: !GetAtt [LoadBalancer, CanonicalHostedZoneID]
        DNSName: !GetAtt [LoadBalancer, DNSName]

Outputs:
  LoadBalancerArn:
    Value: !Ref LoadBalancer
    Export:
      Name: !Sub ${LoadBalancerName}-Arn
  LoadBalancerDnsName:
    Value: !GetAtt LoadBalancer.DNSName
    Export:
      Name: !Sub ${LoadBalancerName}-DNSName
  LoadBalancerCanonicalHostedZoneID:
    Value: !GetAtt LoadBalancer.CanonicalHostedZoneID
    Export:
      Name: !Sub ${LoadBalancerName}-CanonicalHostedZoneID