AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Stack da infraestrutura dos API Gateways Public v-1.0

Parameters:
  Env:
    Type: String
    Default: dev
    AllowedValues:
    - dev
    - hml
    - prd
  Versao:
    Type: String
    Default: 0
  AccountEksDomainName:
    Type: String
    Description: EKS Domain name defined in account/.kubernetes/env/ingress.yaml
    Default: go-account.architecture.caradhras.io
  CreditEksDomainName:
    Type: String
    Description: EKS Domain name defined in credit/.kubernetes/env/ingress.yaml
    Default: go-credit.architecture.caradhras.io
  EksVpcLinkId:
    Type: String
    Description: EKS VPC LinkID
    Default: umjxfk
  DatadogForwarderFunction:
    Type: String
    Default: AWS::NoValue
  PublicApiLogFormat:
    Type: String
    Default: '{"api": "$context.authorizer.apiName", "requestId": "$context.requestId",
      "sourceIP": "$context.identity.sourceIp", "userAgent": "$context.identity.userAgent",
      "WAFresponse": "$context.wafResponseCode", "httpMethod": "$context.httpMethod",
      "path": "$context.path", "respTime":$context.integrationLatency, "responseCode":
      "$context.status", "integRespCode": "$context.integrationStatus", "reqTime":$context.requestTimeEpoch,
      "resourcePath": "$context.resourcePath", "apiId": "$context.apiId", "appClient":
      "$context.authorizer.principalId", "issuerName": "$context.authorizer.nome_emissor",
      "issuerId": "$context.authorizer.id_emissor", "jwtId": "$context.authorizer.jwt_id",
      "authLatency": "$context.authorizer.latency"}'
  PublicApiName:
    Type: String
    Default: api-global-pub
  PublicApiLogGroupName:
    Type: String
    Description: Name of API Gateway Log Group
    Default: /dock/apigateway/api-global-pub
  Application:
    Type: String
    Default: api-global-pub-iac
  BusinessUnit:
    Type: String
    Default: global
  Owner:
    Type: String
    Default: architecture
  PciScope:
    Type: String
    AllowedValues:
    - 'true'
    - 'false'
    Default: 'false'
  Service:
    Type: String
    Default: api-global-pub-iac
  EdgeCertificateArn:
    Type: String
    Default: arn:aws:acm:us-east-1:908671954593:certificate/6dfea057-7ca7-41b9-95a0-b63aaa6640a2
  RegionalCertificateArn:
    Type: String
    Default: arn:aws:acm:us-east-2:908671954593:certificate/a784955c-9a8b-4403-bea2-527035ab3782 
  ApiGatewayDomainName:
    Type: String
    Default: api-global-pub.architecture.caradhras.io
  ApiGatewayMltsDomainName:
    Type: String
    Default: api-global-pub-mlts.architecture.caradhras.io
  WafaclArn:
    Type: String
    Description: Association WAF in API ApiGateway
    Default: arn:aws:wafv2:us-east-2:908671954593:regional/webacl/acl-basic/ddfc01f0-6018-4fbd-bd02-b3d06f439283
  AuthorizerARN:
    Type: String
    Default: arn:aws:lambda:us-east-2:908671954593:function:lambda-go-auth-apigw
  AuthorizerUri:
    Type: String
    Default: arn:aws:apigateway:us-east-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-2:908671954593:function:lambda-go-auth-apigw/invocations

Conditions:
  enableDatadog:
    Fn::Or:
    - Fn::Equals:
      - Ref: Env
      - prd
    - Fn::Equals:
      - Ref: Env
      - hml
      
Resources:
  LogGroupPublicApi:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName:
        Ref: PublicApiLogGroupName
      Tags:
      - Key: application
        Value:
          Ref: Application
      - Key: business_unit
        Value:
          Ref: BusinessUnit
      - Key: env
        Value:
          Ref: Env
      - Key: owner
        Value:
          Ref: Owner
      - Key: pci_scope
        Value:
          Ref: PciScope
      - Key: resource
        Value: log-group
      - Key: service
        Value:
          Ref: Service
      - Key: stack
        Value:
          Fn::Sub: ${AWS::StackName}

  WafAssociation:
    Type: AWS::WAFv2::WebACLAssociation
    Properties:
      ResourceArn:
        Fn::Sub: arn:aws:apigateway:${AWS::Region}::/restapis/${PublicApiGateway}/stages/${PublicApiGateway.Stage}
      WebACLArn:
        Ref: WafaclArn

  PublicApiGateway:
    Type: AWS::Serverless::Api
    Properties:
      AccessLogSetting:
        DestinationArn:
          Fn::GetAtt:
          - LogGroupPublicApi
          - Arn
        Format:
          Ref: PublicApiLogFormat
      AlwaysDeploy: true
      DefinitionBody:
        swagger: '2.0'
        info:
          title: api-global-pub
        tags:
        - name: api-global-pub
          description: Api Global
        schemes:
        - https
        paths:
          /account/{proxy+}:
            x-amazon-apigateway-any-method:
              security:
              - docknito: []
              x-amazon-apigateway-integration:
                uri:
                  Fn::Sub: https://${AccountEksDomainName}/account/{proxy}
                passthroughBehavior: when_no_match
                requestParameters:
                  integration.request.path.proxy: method.request.path.proxy
                  integration.request.header.requestId: context.requestId
                  integration.request.header.X-Forwarded-For: context.identity.sourceIp
                  integration.request.header.X-AppClient-ID: context.authorizer.principalId
                  integration.request.header.X-Client-ID: context.authorizer.tenant_id
                httpMethod: ANY
                type: http_proxy
                connectionType: VPC_LINK
                connectionId: !Ref EksVpcLinkId
          /credit/{proxy+}:
            x-amazon-apigateway-any-method:
              security:
              - docknito: []
              x-amazon-apigateway-integration:
                uri:
                  Fn::Sub: https://${CreditEksDomainName}/credit/{proxy}
                passthroughBehavior: when_no_match
                requestParameters:
                  integration.request.path.proxy: method.request.path.proxy
                  integration.request.header.requestId: context.requestId
                  integration.request.header.X-Forwarded-For: context.identity.sourceIp
                  integration.request.header.X-AppClient-ID: context.authorizer.principalId
                  integration.request.header.X-Client-ID: context.authorizer.tenant_id
                httpMethod: ANY
                type: http_proxy
                connectionType: VPC_LINK
                connectionId: !Ref EksVpcLinkId
        x-amazon-apigateway-api-key-source: AUTHORIZER
        securityDefinitions:
          docknito:
            type: apiKey
            name: Unused
            in: header
            x-amazon-apigateway-authtype: custom
            x-amazon-apigateway-authorizer:
              authorizerUri: !Ref AuthorizerUri
              authorizerResultTtlInSeconds: 600
              identitySource: method.request.header.Authorization, context.path, context.httpMethod, context.identity.sourceIp
              type: request
        definitions:
          Empty:
            type: object
            title: Empty Schema
        x-amazon-apigateway-gateway-responses:
          UNAUTHORIZED:
            statusCode: 401
            responseTemplates:
              application/json: '{"error": { "id": "$context.requestId", "description":
                "Unauthorized", "code": "401"}}'
          ACCESS_DENIED:
            statusCode: 403
            responseTemplates:
              application/json: '{"error": { "id": "$context.requestId", "description":
                "Forbidden", "code": "403"}}'
          DEFAULT_4XX:
            statusCode: 404
            responseTemplates:
              application/json: '{"error": { "id": "$context.requestId", "description":
                "Resource not found", "code": "404"}}'
          DEFAULT_5XX:
            statusCode: 500
            responseTemplates:
              application/json: '{"error": { "id": "$context.requestId", "description":
                "Internal Server Error", "code": "500"}}'
          THROTTLED:
            statusCode: 429
            responseTemplates:
              application/json: '{"error": { "id": "$context.requestId", "description":
                "Too many requests", "code": "429"}}'
      Description: API publica
      DisableExecuteApiEndpoint: true
      EndpointConfiguration:
        Type: EDGE
      MethodSettings:
      - ResourcePath: /*
        HttpMethod: '*'
        MetricsEnabled: true
        DataTraceEnabled: false
        LoggingLevel: INFO
      StageName: Live
      Tags:
        application:
          Ref: Application
        business_unit:
          Ref: BusinessUnit
        env:
          Ref: Env
        owner:
          Ref: Owner
        pci_scope:
          Ref: PciScope
        service:
          Ref: Service
        resource: api-gateway
        stack:
          Fn::Sub: ${AWS::StackName}
      TracingEnabled: false
      Variables:
        apiName:
          Ref: PublicApiName
  
  ApiCustomDomainName:
    Type: AWS::ApiGateway::DomainName
    Properties:
      DomainName: !Ref ApiGatewayDomainName
      EndpointConfiguration:
        Types:
          - EDGE
      SecurityPolicy: TLS_1_2
      CertificateArn: !Ref EdgeCertificateArn   

  ApiMtlsCustomDomainName:
    Type: AWS::ApiGateway::DomainName
    Properties:
      DomainName: !Ref ApiGatewayMltsDomainName
      EndpointConfiguration:
        Types:
          - REGIONAL
      SecurityPolicy: TLS_1_2
      RegionalCertificateArn: !Ref RegionalCertificateArn   
      MutualTlsAuthentication:
        TruststoreUri: 's3://eliezerraj-908671954593-mtls-truststore/mtls-api-go-global.crt'
        TruststoreVersion: 'GiVhMci1VhdQ6lBsQmvQDOV6UIqiL15h'

  ApiInvokePermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      FunctionName: !Ref AuthorizerARN
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com

  ApiBaseMapping:
    Type: AWS::ApiGateway::BasePathMapping
    Properties:
      DomainName: !Ref ApiGatewayDomainName
      RestApiId:  !Ref PublicApiGateway
      Stage: !Ref PublicApiGateway.Stage

  ApiMtlsBaseMapping:
    Type: AWS::ApiGateway::BasePathMapping
    Properties:
      DomainName: !Ref ApiGatewayMltsDomainName
      RestApiId:  !Ref PublicApiGateway
      Stage: !Ref PublicApiGateway.Stage
