AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Persons Module
Parameters:
  Versao:
    Type: String
    Default: 0
  CustomAccessLogFormatParameter:
    Type: AWS::SSM::Parameter::Value<String>
    Default: CustomAccessLogFormat
  DatabaseSecretName:
    Type: String
  DatabaseSchemaName:
    Type: String
  RedisUrl:
    Type: String
  Timeout:
    Type: Number
    Default: 900
  RetentionPeriodDlq:
    Type: Number
    Default: 1209600
  MaxReceiveCount:
    Type: Number
    Default: 3
  VPCEndpointId:
    Type: String
  VPCEndpointUrl:
    Type: String
  Env:
    Type: String
  Runtime:
    Type: String
  KafkaClusterSecretName:
    Type: String
  KMSCrossAccountEncryptionKey:
    Type: String
  AWSRegion:
    Type: String
  LambdaTimeout:
    Type: String
  LambdaMemorySize:
    Type: String
  LambdaAlias:
    Type: String
    Default: lambdaAlias
  ProvisionedConcurrentLegalPersonRead:
    Type: Number
  ProvisionedConcurrentNaturalPersonRead:
    Type: Number
  RDSProxyHost:
    Type: String
  TopicNamePeople:
    Type: String
    Default: kfk.dev.people
  DatadogTracerEnabled:
    Type: String
    Description: Flag true or false to enable trace with APM Datadog.
    Default: 'false'
  DatadogSiteUrl:
    Type: String
    Default: datadoghq.com
  DatadogApiKeySecretArn:
    Type: String
    Default: arn:aws:secretsmanager:us-east-2:711251547192:secret:DdApiKeySecret-fake-fake
  DatadogHandler:
    Type: String
    Default: datadog_lambda.handler.handler
    Description: Handler to use trace requests with APM Datadog - Python.
Mappings:
  Network:
    dev:
      VpcId: vpc-0df31a6e2d113d8b7
      VPCEndpointId: vpce-0cc0b1181b93539f0
      VpcCidr: 10.214.0.0/16
      SubnetAZA: subnet-0ca2d45be9d6ab5bc
      SubnetAZB: subnet-0b2b57acbb1da0623
      SubnetAZC: subnet-05d3e7f4611c12a23
      HostedZoneId: Z0377030ZU2M07R9SONJ
      RegionalCertificateArn: arn:aws:acm:us-east-2:711251547192:certificate/c4e07ce3-c267-4ca6-b4d3-b916850d8371
    hml:
      VpcId: vpc-053bf362926211174
      VPCEndpointId: vpce-078c9ba44be2cbce6
      VpcCidr: 10.213.0.0/16
      SubnetAZA: subnet-0fb3b86a8657a696f
      SubnetAZB: subnet-0fb6727ed0041b799
      SubnetAZC: subnet-0c45c1b6d9ba2cfc5
      HostedZoneId: Z01227722HMW1YN4CI64P
      RegionalCertificateArn: arn:aws:acm:us-east-2:483285106673:certificate/5b4ed372-50bc-4a5c-9e09-7843f33b8d73
    prd:
      VpcId: vpc-05583dab4737e64fd
      VPCEndpointId: vpce-00513565c490ea37d
      VpcCidr: 10.197.128.0/17
      SubnetAZA: subnet-0a0c6c1b76845ca8a
      SubnetAZB: subnet-0d2dc2da1fb208470
      SubnetAZC: subnet-0446d425f47765e5b
      HostedZoneId: Z019603768DTZCWY1ZOI
      RegionalCertificateArn: arn:aws:acm:sa-east-1:437503527774:certificate/983ff9b3-6c5c-404e-b1ae-f0e2fcaeddc9
  Tag:
    ServiceName:
      value: persons
    SquadName:
      value: squad-vision
    SquadSlack:
      value: squad-vision
    SquadMail:
      value: squad-vision@dock.tech
    CustomDomainTemplate:
      value: 2.0.0
Conditions:
  isPrd:
    Fn::Equals:
    - Ref: Env
    - prd
  isDevOrHml:
    Fn::Or:
    - Fn::Equals:
      - Ref: Env
      - dev
    - Fn::Equals:
      - Ref: Env
      - hml
  enableDatadog:
    Fn::Or:
    - Fn::Equals:
      - Ref: Env
      - prd
    - Fn::Equals:
      - Ref: Env
      - hml
Resources:
  PersonsLogGroupPrivate:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /dock/apigateway/persons-private
      Tags:
      - Key: env
        Value:
          Ref: Env
      - Key: service
        Value:
          Fn::FindInMap:
          - Tag
          - ServiceName
          - value
      - Key: stack
        Value:
          Fn::Sub: ${AWS::StackName}
      - Key: squad
        Value:
          Fn::FindInMap:
          - Tag
          - SquadName
          - value
      - Key: slack
        Value:
          Fn::FindInMap:
          - Tag
          - SquadSlack
          - value
      - Key: email
        Value:
          Fn::FindInMap:
          - Tag
          - SquadMail
          - value
      - Key: resource
        Value: log-group
  LegalPersonsReadLogGroupPrivate:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /aws/lambda/persons-legal-person-read
      Tags:
      - Key: env
        Value:
          Ref: Env
      - Key: service
        Value:
          Fn::FindInMap:
          - Tag
          - ServiceName
          - value
      - Key: stack
        Value:
          Fn::Sub: ${AWS::StackName}
      - Key: squad
        Value:
          Fn::FindInMap:
          - Tag
          - SquadName
          - value
      - Key: slack
        Value:
          Fn::FindInMap:
          - Tag
          - SquadSlack
          - value
      - Key: email
        Value:
          Fn::FindInMap:
          - Tag
          - SquadMail
          - value
      - Key: resource
        Value: log-group
  LegalPersonsUpsertLogGroupPrivate:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /aws/lambda/persons-legal-person-upsert
      Tags:
      - Key: env
        Value:
          Ref: Env
      - Key: service
        Value:
          Fn::FindInMap:
          - Tag
          - ServiceName
          - value
      - Key: stack
        Value:
          Fn::Sub: ${AWS::StackName}
      - Key: squad
        Value:
          Fn::FindInMap:
          - Tag
          - SquadName
          - value
      - Key: slack
        Value:
          Fn::FindInMap:
          - Tag
          - SquadSlack
          - value
      - Key: email
        Value:
          Fn::FindInMap:
          - Tag
          - SquadMail
          - value
      - Key: resource
        Value: log-group
  NaturalPersonsReadLogGroupPrivate:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /aws/lambda/persons-natural-person-read
      Tags:
      - Key: env
        Value:
          Ref: Env
      - Key: service
        Value:
          Fn::FindInMap:
          - Tag
          - ServiceName
          - value
      - Key: stack
        Value:
          Fn::Sub: ${AWS::StackName}
      - Key: squad
        Value:
          Fn::FindInMap:
          - Tag
          - SquadName
          - value
      - Key: slack
        Value:
          Fn::FindInMap:
          - Tag
          - SquadSlack
          - value
      - Key: email
        Value:
          Fn::FindInMap:
          - Tag
          - SquadMail
          - value
      - Key: resource
        Value: log-group
  NaturalPersonsUpsertLogGroupPrivate:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /aws/lambda/persons-natural-person-upsert
      Tags:
      - Key: env
        Value:
          Ref: Env
      - Key: service
        Value:
          Fn::FindInMap:
          - Tag
          - ServiceName
          - value
      - Key: stack
        Value:
          Fn::Sub: ${AWS::StackName}
      - Key: squad
        Value:
          Fn::FindInMap:
          - Tag
          - SquadName
          - value
      - Key: slack
        Value:
          Fn::FindInMap:
          - Tag
          - SquadSlack
          - value
      - Key: email
        Value:
          Fn::FindInMap:
          - Tag
          - SquadMail
          - value
      - Key: resource
        Value: log-group
  PersonsSetupLogGroupPrivate:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /aws/lambda/persons-setup-type
      Tags:
      - Key: env
        Value:
          Ref: Env
      - Key: service
        Value:
          Fn::FindInMap:
          - Tag
          - ServiceName
          - value
      - Key: stack
        Value:
          Fn::Sub: ${AWS::StackName}
      - Key: squad
        Value:
          Fn::FindInMap:
          - Tag
          - SquadName
          - value
      - Key: slack
        Value:
          Fn::FindInMap:
          - Tag
          - SquadSlack
          - value
      - Key: email
        Value:
          Fn::FindInMap:
          - Tag
          - SquadMail
          - value
      - Key: resource
        Value: log-group
  PersonsResilienceLogGroupPrivate:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /aws/lambda/persons-resilience
      Tags:
      - Key: env
        Value:
          Ref: Env
      - Key: service
        Value:
          Fn::FindInMap:
          - Tag
          - ServiceName
          - value
      - Key: stack
        Value:
          Fn::Sub: ${AWS::StackName}
      - Key: squad
        Value:
          Fn::FindInMap:
          - Tag
          - SquadName
          - value
      - Key: slack
        Value:
          Fn::FindInMap:
          - Tag
          - SquadSlack
          - value
      - Key: email
        Value:
          Fn::FindInMap:
          - Tag
          - SquadMail
          - value
      - Key: resource
        Value: log-group
  PersonsApiGatewayPrivate:
    Type: AWS::Serverless::Api
    Properties:
      Name: persons-api-private
      StageName: Live
      Variables:
        apiName: persons-api
      EndpointConfiguration:
        Type: PRIVATE
        VPCEndpointIds:
        - Ref: VPCEndpointId
      AccessLogSetting:
        DestinationArn:
          Fn::GetAtt:
          - PersonsLogGroupPrivate
          - Arn
        Format:
          Ref: CustomAccessLogFormatParameter
      MethodSettings:
      - ResourcePath: /*
        HttpMethod: '*'
        MetricsEnabled: 'true'
        DataTraceEnabled: 'false'
        LoggingLevel: ERROR
      Tags:
        env:
          Ref: Env
        service:
          Fn::FindInMap:
          - Tag
          - ServiceName
          - value
        stack:
          Fn::Sub: ${AWS::StackName}
        squad:
          Fn::FindInMap:
          - Tag
          - SquadName
          - value
        slack:
          Fn::FindInMap:
          - Tag
          - SquadSlack
          - value
        email:
          Fn::FindInMap:
          - Tag
          - SquadMail
          - value
        resource: api-gateway
      DefinitionBody:
        swagger: '2.0'
        info:
          description: Persons Api
          title: Persons Api
          version: 1.0.0
        schemes:
        - https
        paths:
          /person/v1/natural-persons:
            post:
              consumes:
              - application/json
              parameters:
              - description: POST persons request
                schema:
                  $ref: '#/definitions/Empty'
              responses:
                '200':
                  description: Transaction approved
                  schema:
                    $ref: '#/definitions/Empty'
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
              x-amazon-apigateway-integration:
                credentials:
                  Fn::Sub: arn:aws:iam::${AWS::AccountId}:role/PersonsAPIGatewayExecutionRole
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${NaturalPersonUpsertFunction.Arn}/invocations
                responses:
                  default:
                    statusCode: '200'
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,PATCH,POST,PUT'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                passthroughBehavior: when_no_match
                httpMethod: POST
                type: aws_proxy
            get:
              produces:
              - application/json
              responses:
                '200':
                  description: Transaction approved
                  schema:
                    $ref: '#/definitions/Empty'
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
              x-amazon-apigateway-integration:
                credentials:
                  Fn::Sub: arn:aws:iam::${AWS::AccountId}:role/PersonsAPIGatewayExecutionRole
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${NaturalPersonReadFunction.Arn}:${LambdaAlias}/invocations
                responses:
                  default:
                    statusCode: '200'
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,PATCH,POST,PUT'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                passthroughBehavior: when_no_match
                httpMethod: POST
                type: aws_proxy
          /person/v1/natural-persons/{person_id}/documents:
            post:
              consumes:
              - application/json
              parameters:
              - description: POST Documents
                schema:
                  $ref: '#/definitions/Empty'
              responses:
                '200':
                  description: Transaction approved
                  schema:
                    $ref: '#/definitions/Empty'
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
              x-amazon-apigateway-integration:
                credentials:
                  Fn::Sub: arn:aws:iam::${AWS::AccountId}:role/PersonsAPIGatewayExecutionRole
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${NaturalPersonUpsertFunction.Arn}/invocations
                responses:
                  default:
                    statusCode: '200'
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,PATCH,POST,PUT'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                passthroughBehavior: when_no_match
                httpMethod: POST
                type: aws_proxy
            get:
              produces:
              - application/json
              responses:
                '200':
                  description: Transaction approved
                  schema:
                    $ref: '#/definitions/Empty'
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
              x-amazon-apigateway-integration:
                credentials:
                  Fn::Sub: arn:aws:iam::${AWS::AccountId}:role/PersonsAPIGatewayExecutionRole
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${NaturalPersonReadFunction.Arn}:${LambdaAlias}/invocations
                responses:
                  default:
                    statusCode: '200'
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,PATCH,POST,PUT'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                passthroughBehavior: when_no_match
                httpMethod: POST
                type: aws_proxy
          /person/v1/natural-persons/{person_id}/documents/{document_id}:
            patch:
              consumes:
              - application/json
              parameters:
              - description: PATCH Documents
                schema:
                  $ref: '#/definitions/Empty'
              responses:
                '200':
                  description: Transaction approved
                  schema:
                    $ref: '#/definitions/Empty'
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
              x-amazon-apigateway-integration:
                credentials:
                  Fn::Sub: arn:aws:iam::${AWS::AccountId}:role/PersonsAPIGatewayExecutionRole
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${NaturalPersonUpsertFunction.Arn}/invocations
                responses:
                  default:
                    statusCode: '200'
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,PATCH,POST,PUT'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                passthroughBehavior: when_no_match
                httpMethod: POST
                type: aws_proxy
            get:
              consumes:
              - application/json
              parameters:
              - description: GET Documents
                schema:
                  $ref: '#/definitions/Empty'
              responses:
                '200':
                  description: Transaction approved
                  schema:
                    $ref: '#/definitions/Empty'
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
              x-amazon-apigateway-integration:
                credentials:
                  Fn::Sub: arn:aws:iam::${AWS::AccountId}:role/PersonsAPIGatewayExecutionRole
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${NaturalPersonReadFunction.Arn}:${LambdaAlias}/invocations
                responses:
                  default:
                    statusCode: '200'
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,PATCH,POST,PUT'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                passthroughBehavior: when_no_match
                httpMethod: POST
                type: aws_proxy
          /person/v1/natural-persons/{person_id}/phones:
            post:
              consumes:
              - application/json
              parameters:
              - description: POST Phones
                schema:
                  $ref: '#/definitions/Empty'
              responses:
                '200':
                  description: Transaction approved
                  schema:
                    $ref: '#/definitions/Empty'
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
              x-amazon-apigateway-integration:
                credentials:
                  Fn::Sub: arn:aws:iam::${AWS::AccountId}:role/PersonsAPIGatewayExecutionRole
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${NaturalPersonUpsertFunction.Arn}/invocations
                responses:
                  default:
                    statusCode: '200'
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,PATCH,POST,PUT'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                passthroughBehavior: when_no_match
                httpMethod: POST
                type: aws_proxy
            get:
              produces:
              - application/json
              responses:
                '200':
                  description: Transaction approved
                  schema:
                    $ref: '#/definitions/Empty'
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
              x-amazon-apigateway-integration:
                credentials:
                  Fn::Sub: arn:aws:iam::${AWS::AccountId}:role/PersonsAPIGatewayExecutionRole
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${NaturalPersonReadFunction.Arn}:${LambdaAlias}/invocations
                responses:
                  default:
                    statusCode: '200'
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,PATCH,POST,PUT'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                passthroughBehavior: when_no_match
                httpMethod: POST
                type: aws_proxy
          /person/v1/natural-persons/{person_id}/phones/{phone_id}:
            get:
              consumes:
              - application/json
              parameters:
              - description: GET Phone Natural Person
                schema:
                  $ref: '#/definitions/Empty'
              responses:
                '200':
                  description: Transaction approved
                  schema:
                    $ref: '#/definitions/Empty'
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
              x-amazon-apigateway-integration:
                credentials:
                  Fn::Sub: arn:aws:iam::${AWS::AccountId}:role/PersonsAPIGatewayExecutionRole
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${NaturalPersonReadFunction.Arn}:${LambdaAlias}/invocations
                responses:
                  default:
                    statusCode: '200'
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,PATCH,POST,PUT'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                passthroughBehavior: when_no_match
                httpMethod: POST
                type: aws_proxy
            patch:
              consumes:
              - application/json
              parameters:
              - description: Patch phone request
                schema:
                  $ref: '#/definitions/Empty'
              responses:
                '200':
                  description: Transaction approved
                  schema:
                    $ref: '#/definitions/Empty'
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
              x-amazon-apigateway-integration:
                credentials:
                  Fn::Sub: arn:aws:iam::${AWS::AccountId}:role/PersonsAPIGatewayExecutionRole
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${NaturalPersonUpsertFunction.Arn}/invocations
                responses:
                  default:
                    statusCode: '200'
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,PATCH,POST,PUT'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                passthroughBehavior: when_no_match
                httpMethod: POST
                type: aws_proxy
          /person/v1/natural-persons/{person_id}/addresses:
            post:
              consumes:
              - application/json
              parameters:
              - description: POST Addresses
                schema:
                  $ref: '#/definitions/Empty'
              responses:
                '200':
                  description: Transaction approved
                  schema:
                    $ref: '#/definitions/Empty'
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
              x-amazon-apigateway-integration:
                credentials:
                  Fn::Sub: arn:aws:iam::${AWS::AccountId}:role/PersonsAPIGatewayExecutionRole
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${NaturalPersonUpsertFunction.Arn}/invocations
                responses:
                  default:
                    statusCode: '200'
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,PATCH,POST,PUT'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                passthroughBehavior: when_no_match
                httpMethod: POST
                type: aws_proxy
            get:
              consumes:
              - application/json
              parameters:
              - description: GET Addresses
                schema:
                  $ref: '#/definitions/Empty'
              responses:
                '200':
                  description: Transaction approved
                  schema:
                    $ref: '#/definitions/Empty'
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
              x-amazon-apigateway-integration:
                credentials:
                  Fn::Sub: arn:aws:iam::${AWS::AccountId}:role/PersonsAPIGatewayExecutionRole
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${NaturalPersonReadFunction.Arn}:${LambdaAlias}/invocations
                responses:
                  default:
                    statusCode: '200'
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,PATCH,POST,PUT'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                passthroughBehavior: when_no_match
                httpMethod: POST
                type: aws_proxy
          /person/v1/natural-persons/{person_id}/addresses/{address_id}:
            patch:
              consumes:
              - application/json
              parameters:
              - description: Patch address request
                schema:
                  $ref: '#/definitions/Empty'
              responses:
                '200':
                  description: Transaction approved
                  schema:
                    $ref: '#/definitions/Empty'
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
              x-amazon-apigateway-integration:
                credentials:
                  Fn::Sub: arn:aws:iam::${AWS::AccountId}:role/PersonsAPIGatewayExecutionRole
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${NaturalPersonUpsertFunction.Arn}/invocations
                responses:
                  default:
                    statusCode: '200'
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,PATCH,POST,PUT'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                passthroughBehavior: when_no_match
                httpMethod: POST
                type: aws_proxy
            get:
              consumes:
              - application/json
              parameters:
              - description: GET Address Natural Person
                schema:
                  $ref: '#/definitions/Empty'
              responses:
                '200':
                  description: Transaction approved
                  schema:
                    $ref: '#/definitions/Empty'
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
              x-amazon-apigateway-integration:
                credentials:
                  Fn::Sub: arn:aws:iam::${AWS::AccountId}:role/PersonsAPIGatewayExecutionRole
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${NaturalPersonReadFunction.Arn}:${LambdaAlias}/invocations
                responses:
                  default:
                    statusCode: '200'
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,PATCH,POST,PUT'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                passthroughBehavior: when_no_match
                httpMethod: POST
                type: aws_proxy
          /person/v1/natural-persons/{person_id}:
            get:
              produces:
              - application/json
              responses:
                '200':
                  description: Transaction approved
                  schema:
                    $ref: '#/definitions/Empty'
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
              x-amazon-apigateway-integration:
                credentials:
                  Fn::Sub: arn:aws:iam::${AWS::AccountId}:role/PersonsAPIGatewayExecutionRole
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${NaturalPersonReadFunction.Arn}:${LambdaAlias}/invocations
                responses:
                  default:
                    statusCode: '200'
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,PATCH,POST,PUT'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                passthroughBehavior: when_no_match
                httpMethod: POST
                type: aws_proxy
            patch:
              consumes:
              - application/json
              parameters:
              - description: POST persons request
                schema:
                  $ref: '#/definitions/Empty'
              responses:
                '200':
                  description: Transaction approved
                  schema:
                    $ref: '#/definitions/Empty'
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
              x-amazon-apigateway-integration:
                credentials:
                  Fn::Sub: arn:aws:iam::${AWS::AccountId}:role/PersonsAPIGatewayExecutionRole
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${NaturalPersonUpsertFunction.Arn}/invocations
                responses:
                  default:
                    statusCode: '200'
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,PATCH,POST,PUT'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                passthroughBehavior: when_no_match
                httpMethod: POST
                type: aws_proxy
          /person/v1/natural-persons/{person_id}/complete:
            patch:
              consumes:
              - application/json
              parameters:
              - description: PATCH Natural Persons Complete
                schema:
                  $ref: '#/definitions/Empty'
              responses:
                '200':
                  description: Transaction approved
                  schema:
                    $ref: '#/definitions/Empty'
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
              x-amazon-apigateway-integration:
                credentials:
                  Fn::Sub: arn:aws:iam::${AWS::AccountId}:role/PersonsAPIGatewayExecutionRole
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${NaturalPersonUpsertFunction.Arn}/invocations
                responses:
                  default:
                    statusCode: '200'
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,PATCH,POST,PUT'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                passthroughBehavior: when_no_match
                httpMethod: POST
                type: aws_proxy
          /person/v1/natural-persons/{person_id}/relationships:
            get:
              consumes:
              - application/json
              parameters:
              - description: LIST Natural Person Relationships
                schema:
                  $ref: '#/definitions/Empty'
              responses:
                '200':
                  description: Transaction approved
                  schema:
                    $ref: '#/definitions/Empty'
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
              x-amazon-apigateway-integration:
                credentials:
                  Fn::Sub: arn:aws:iam::${AWS::AccountId}:role/PersonsAPIGatewayExecutionRole
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${NaturalPersonUpsertFunction.Arn}/invocations
                responses:
                  default:
                    statusCode: '200'
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,PATCH,POST,PUT'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                passthroughBehavior: when_no_match
                httpMethod: POST
                type: aws_proxy
          /person/v1/natural-persons/{person_id}/emails:
            post:
              consumes:
              - application/json
              parameters:
              - description: POST Emails
                schema:
                  $ref: '#/definitions/Empty'
              responses:
                '200':
                  description: Transaction approved
                  schema:
                    $ref: '#/definitions/Empty'
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
              x-amazon-apigateway-integration:
                credentials:
                  Fn::Sub: arn:aws:iam::${AWS::AccountId}:role/PersonsAPIGatewayExecutionRole
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${NaturalPersonUpsertFunction.Arn}/invocations
                responses:
                  default:
                    statusCode: '200'
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,PATCH,POST,PUT'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                passthroughBehavior: when_no_match
                httpMethod: POST
                type: aws_proxy
            get:
              produces:
              - application/json
              responses:
                '200':
                  description: GET Emails
                  schema:
                    $ref: '#/definitions/Empty'
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
              x-amazon-apigateway-integration:
                credentials:
                  Fn::Sub: arn:aws:iam::${AWS::AccountId}:role/PersonsAPIGatewayExecutionRole
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${NaturalPersonReadFunction.Arn}:${LambdaAlias}/invocations
                responses:
                  default:
                    statusCode: '200'
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,PATCH,POST,PUT'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                passthroughBehavior: when_no_match
                httpMethod: POST
                type: aws_proxy
          /person/v1/natural-persons/{person_id}/emails/{email_id}:
            get:
              consumes:
              - application/json
              parameters:
              - description: GET Email Natural Person
                schema:
                  $ref: '#/definitions/Empty'
              responses:
                '200':
                  description: Transaction approved
                  schema:
                    $ref: '#/definitions/Empty'
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
              x-amazon-apigateway-integration:
                credentials:
                  Fn::Sub: arn:aws:iam::${AWS::AccountId}:role/PersonsAPIGatewayExecutionRole
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${NaturalPersonReadFunction.Arn}:${LambdaAlias}/invocations
                responses:
                  default:
                    statusCode: '200'
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,PATCH,POST,PUT'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                passthroughBehavior: when_no_match
                httpMethod: POST
                type: aws_proxy
            patch:
              consumes:
              - application/json
              parameters:
              - description: PATCH Emails
                schema:
                  $ref: '#/definitions/Empty'
              responses:
                '200':
                  description: Transaction approved
                  schema:
                    $ref: '#/definitions/Empty'
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
              x-amazon-apigateway-integration:
                credentials:
                  Fn::Sub: arn:aws:iam::${AWS::AccountId}:role/PersonsAPIGatewayExecutionRole
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${NaturalPersonUpsertFunction.Arn}/invocations
                responses:
                  default:
                    statusCode: '200'
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,PATCH,POST,PUT'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                passthroughBehavior: when_no_match
                httpMethod: POST
                type: aws_proxy
          /person/v1/setup/types:
            post:
              consumes:
              - application/json
              parameters:
              - description: POST persons request
                schema:
                  $ref: '#/definitions/Empty'
              responses:
                '200':
                  description: POST Setup Types
                  schema:
                    $ref: '#/definitions/Empty'
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
              x-amazon-apigateway-integration:
                credentials:
                  Fn::Sub: arn:aws:iam::${AWS::AccountId}:role/PersonsAPIGatewayExecutionRole
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${PersonsSetupTypeFunction.Arn}/invocations
                responses:
                  default:
                    statusCode: '200'
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,PATCH,POST,PUT'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                passthroughBehavior: when_no_match
                httpMethod: POST
                type: aws_proxy
            get:
              produces:
              - application/json
              responses:
                '200':
                  description: GET setup types
                  schema:
                    $ref: '#/definitions/Empty'
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
              x-amazon-apigateway-integration:
                credentials:
                  Fn::Sub: arn:aws:iam::${AWS::AccountId}:role/PersonsAPIGatewayExecutionRole
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${PersonsSetupTypeFunction.Arn}/invocations
                responses:
                  default:
                    statusCode: '200'
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,PATCH,POST,PUT'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                passthroughBehavior: when_no_match
                httpMethod: POST
                type: aws_proxy
          /person/v1/setup/types/{id}:
            get:
              consumes:
              - application/json
              parameters:
              - description: GET setup types
                schema:
                  $ref: '#/definitions/Empty'
              responses:
                '200':
                  description: Transaction approved
                  schema:
                    $ref: '#/definitions/Empty'
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
              x-amazon-apigateway-integration:
                credentials:
                  Fn::Sub: arn:aws:iam::${AWS::AccountId}:role/PersonsAPIGatewayExecutionRole
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${PersonsSetupTypeFunction.Arn}/invocations
                responses:
                  default:
                    statusCode: '200'
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,PATCH,POST,PUT'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                passthroughBehavior: when_no_match
                httpMethod: POST
                type: aws_proxy
            patch:
              consumes:
              - application/json
              parameters:
              - description: PATCH setup types
                schema:
                  $ref: '#/definitions/Empty'
              responses:
                '200':
                  description: Transaction approved
                  schema:
                    $ref: '#/definitions/Empty'
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
              x-amazon-apigateway-integration:
                credentials:
                  Fn::Sub: arn:aws:iam::${AWS::AccountId}:role/PersonsAPIGatewayExecutionRole
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${PersonsSetupTypeFunction.Arn}/invocations
                responses:
                  default:
                    statusCode: '200'
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,PATCH,POST,PUT'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                passthroughBehavior: when_no_match
                httpMethod: POST
                type: aws_proxy
          /person/v1/person/{person_id}:
            get:
              produces:
              - application/json
              responses:
                '200':
                  description: GET Person (persons)
                  schema:
                    $ref: '#/definitions/Empty'
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
              x-amazon-apigateway-integration:
                credentials:
                  Fn::Sub: arn:aws:iam::${AWS::AccountId}:role/PersonsAPIGatewayExecutionRole
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${PersonsSetupTypeFunction.Arn}/invocations
                responses:
                  default:
                    statusCode: '200'
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,PATCH,POST,PUT'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                passthroughBehavior: when_no_match
                httpMethod: POST
                type: aws_proxy
          /person/v1/relationships:
            post:
              consumes:
              - application/json
              parameters:
              - description: POST Relationships
                schema:
                  $ref: '#/definitions/Empty'
              responses:
                '200':
                  description: Transaction approved
                  schema:
                    $ref: '#/definitions/Empty'
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
              x-amazon-apigateway-integration:
                credentials:
                  Fn::Sub: arn:aws:iam::${AWS::AccountId}:role/PersonsAPIGatewayExecutionRole
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${NaturalPersonUpsertFunction.Arn}/invocations
                responses:
                  default:
                    statusCode: '200'
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,PATCH,POST,PUT'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                passthroughBehavior: when_no_match
                httpMethod: POST
                type: aws_proxy
          /person/v1/legal-persons:
            post:
              consumes:
              - application/json
              parameters:
              - description: POST Legal Person
                schema:
                  $ref: '#/definitions/Empty'
              responses:
                '200':
                  description: Transaction approved
                  schema:
                    $ref: '#/definitions/Empty'
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
              x-amazon-apigateway-integration:
                credentials:
                  Fn::Sub: arn:aws:iam::${AWS::AccountId}:role/PersonsAPIGatewayExecutionRole
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LegalPersonUpsertFunction.Arn}/invocations
                responses:
                  default:
                    statusCode: '200'
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,PATCH,POST,PUT'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                passthroughBehavior: when_no_match
                httpMethod: POST
                type: aws_proxy
            get:
              produces:
              - application/json
              responses:
                '200':
                  description: Transaction approved
                  schema:
                    $ref: '#/definitions/Empty'
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
              x-amazon-apigateway-integration:
                credentials:
                  Fn::Sub: arn:aws:iam::${AWS::AccountId}:role/PersonsAPIGatewayExecutionRole
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LegalPersonReadFunction.Arn}:${LambdaAlias}/invocations
                responses:
                  default:
                    statusCode: '200'
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,PATCH,POST,PUT'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                passthroughBehavior: when_no_match
                httpMethod: POST
                type: aws_proxy
          /person/v1/legal-persons/{person_id}:
            patch:
              consumes:
              - application/json
              parameters:
              - description: PATCH Legal Person
                schema:
                  $ref: '#/definitions/Empty'
              responses:
                '200':
                  description: Transaction approved
                  schema:
                    $ref: '#/definitions/Empty'
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
              x-amazon-apigateway-integration:
                credentials:
                  Fn::Sub: arn:aws:iam::${AWS::AccountId}:role/PersonsAPIGatewayExecutionRole
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LegalPersonUpsertFunction.Arn}/invocations
                responses:
                  default:
                    statusCode: '200'
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,PATCH,POST,PUT'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                passthroughBehavior: when_no_match
                httpMethod: POST
                type: aws_proxy
            get:
              consumes:
              - application/json
              parameters:
              - description: GET Legal Person
                schema:
                  $ref: '#/definitions/Empty'
              responses:
                '200':
                  description: Transaction approved
                  schema:
                    $ref: '#/definitions/Empty'
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
              x-amazon-apigateway-integration:
                credentials:
                  Fn::Sub: arn:aws:iam::${AWS::AccountId}:role/PersonsAPIGatewayExecutionRole
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LegalPersonReadFunction.Arn}:${LambdaAlias}/invocations
                responses:
                  default:
                    statusCode: '200'
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,PATCH,POST,PUT'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                passthroughBehavior: when_no_match
                httpMethod: POST
                type: aws_proxy
          /person/v1/legal-persons/{person_id}/complete:
            patch:
              consumes:
              - application/json
              parameters:
              - description: PATCH Legal Person Complet
                schema:
                  $ref: '#/definitions/Empty'
              responses:
                '200':
                  description: Transaction approved
                  schema:
                    $ref: '#/definitions/Empty'
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
              x-amazon-apigateway-integration:
                credentials:
                  Fn::Sub: arn:aws:iam::${AWS::AccountId}:role/PersonsAPIGatewayExecutionRole
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LegalPersonUpsertFunction.Arn}/invocations
                responses:
                  default:
                    statusCode: '200'
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,PATCH,POST,PUT'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                passthroughBehavior: when_no_match
                httpMethod: POST
                type: aws_proxy
          /person/v1/legal-persons/{person_id}/addresses:
            post:
              consumes:
              - application/json
              parameters:
              - description: POST Legal Person Addresses
                schema:
                  $ref: '#/definitions/Empty'
              responses:
                '200':
                  description: Transaction approved
                  schema:
                    $ref: '#/definitions/Empty'
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
              x-amazon-apigateway-integration:
                credentials:
                  Fn::Sub: arn:aws:iam::${AWS::AccountId}:role/PersonsAPIGatewayExecutionRole
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LegalPersonUpsertFunction.Arn}/invocations
                responses:
                  default:
                    statusCode: '200'
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,PATCH,POST,PUT'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                passthroughBehavior: when_no_match
                httpMethod: POST
                type: aws_proxy
            get:
              consumes:
              - application/json
              parameters:
              - description: GET Legal Person Addresses
                schema:
                  $ref: '#/definitions/Empty'
              responses:
                '200':
                  description: Transaction approved
                  schema:
                    $ref: '#/definitions/Empty'
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
              x-amazon-apigateway-integration:
                credentials:
                  Fn::Sub: arn:aws:iam::${AWS::AccountId}:role/PersonsAPIGatewayExecutionRole
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LegalPersonReadFunction.Arn}:${LambdaAlias}/invocations
                responses:
                  default:
                    statusCode: '200'
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,PATCH,POST,PUT'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                passthroughBehavior: when_no_match
                httpMethod: POST
                type: aws_proxy
          /person/v1/legal-persons/{person_id}/addresses/{address_id}:
            patch:
              consumes:
              - application/json
              parameters:
              - description: PATCH Address Legal Person
                schema:
                  $ref: '#/definitions/Empty'
              responses:
                '200':
                  description: Transaction approved
                  schema:
                    $ref: '#/definitions/Empty'
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
              x-amazon-apigateway-integration:
                credentials:
                  Fn::Sub: arn:aws:iam::${AWS::AccountId}:role/PersonsAPIGatewayExecutionRole
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LegalPersonUpsertFunction.Arn}/invocations
                responses:
                  default:
                    statusCode: '200'
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,PATCH,POST,PUT'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                passthroughBehavior: when_no_match
                httpMethod: POST
                type: aws_proxy
            get:
              consumes:
              - application/json
              parameters:
              - description: GET Address Legal Person
                schema:
                  $ref: '#/definitions/Empty'
              responses:
                '200':
                  description: Transaction approved
                  schema:
                    $ref: '#/definitions/Empty'
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
              x-amazon-apigateway-integration:
                credentials:
                  Fn::Sub: arn:aws:iam::${AWS::AccountId}:role/PersonsAPIGatewayExecutionRole
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LegalPersonReadFunction.Arn}:${LambdaAlias}/invocations
                responses:
                  default:
                    statusCode: '200'
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,PATCH,POST,PUT'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                passthroughBehavior: when_no_match
                httpMethod: POST
                type: aws_proxy
          /person/v1/legal-persons/{person_id}/phones:
            post:
              consumes:
              - application/json
              parameters:
              - description: POST Legal Person Phones
                schema:
                  $ref: '#/definitions/Empty'
              responses:
                '200':
                  description: Transaction approved
                  schema:
                    $ref: '#/definitions/Empty'
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
              x-amazon-apigateway-integration:
                credentials:
                  Fn::Sub: arn:aws:iam::${AWS::AccountId}:role/PersonsAPIGatewayExecutionRole
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LegalPersonUpsertFunction.Arn}/invocations
                responses:
                  default:
                    statusCode: '200'
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,PATCH,POST,PUT'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                passthroughBehavior: when_no_match
                httpMethod: POST
                type: aws_proxy
            get:
              produces:
              - application/json
              responses:
                '200':
                  description: Transaction approved
                  schema:
                    $ref: '#/definitions/Empty'
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
              x-amazon-apigateway-integration:
                credentials:
                  Fn::Sub: arn:aws:iam::${AWS::AccountId}:role/PersonsAPIGatewayExecutionRole
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LegalPersonReadFunction.Arn}:${LambdaAlias}/invocations
                responses:
                  default:
                    statusCode: '200'
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,PATCH,POST,PUT'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                passthroughBehavior: when_no_match
                httpMethod: POST
                type: aws_proxy
          /person/v1/legal-persons/{person_id}/phones/{phone_id}:
            get:
              consumes:
              - application/json
              parameters:
              - description: GET Phone Legal Person
                schema:
                  $ref: '#/definitions/Empty'
              responses:
                '200':
                  description: Transaction approved
                  schema:
                    $ref: '#/definitions/Empty'
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
              x-amazon-apigateway-integration:
                credentials:
                  Fn::Sub: arn:aws:iam::${AWS::AccountId}:role/PersonsAPIGatewayExecutionRole
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LegalPersonReadFunction.Arn}:${LambdaAlias}/invocations
                responses:
                  default:
                    statusCode: '200'
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,PATCH,POST,PUT'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                passthroughBehavior: when_no_match
                httpMethod: POST
                type: aws_proxy
            patch:
              consumes:
              - application/json
              parameters:
              - description: PATCH Phone Legal Person
                schema:
                  $ref: '#/definitions/Empty'
              responses:
                '200':
                  description: Transaction approved
                  schema:
                    $ref: '#/definitions/Empty'
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
              x-amazon-apigateway-integration:
                credentials:
                  Fn::Sub: arn:aws:iam::${AWS::AccountId}:role/PersonsAPIGatewayExecutionRole
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LegalPersonUpsertFunction.Arn}/invocations
                responses:
                  default:
                    statusCode: '200'
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,PATCH,POST,PUT'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                passthroughBehavior: when_no_match
                httpMethod: POST
                type: aws_proxy
          /person/v1/legal-persons/{person_id}/documents:
            post:
              consumes:
              - application/json
              parameters:
              - description: POST Legal Person Documents
                schema:
                  $ref: '#/definitions/Empty'
              responses:
                '200':
                  description: Transaction approved
                  schema:
                    $ref: '#/definitions/Empty'
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
              x-amazon-apigateway-integration:
                credentials:
                  Fn::Sub: arn:aws:iam::${AWS::AccountId}:role/PersonsAPIGatewayExecutionRole
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LegalPersonUpsertFunction.Arn}/invocations
                responses:
                  default:
                    statusCode: '200'
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,PATCH,POST,PUT'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                passthroughBehavior: when_no_match
                httpMethod: POST
                type: aws_proxy
            get:
              produces:
              - application/json
              responses:
                '200':
                  description: Transaction approved
                  schema:
                    $ref: '#/definitions/Empty'
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
              x-amazon-apigateway-integration:
                credentials:
                  Fn::Sub: arn:aws:iam::${AWS::AccountId}:role/PersonsAPIGatewayExecutionRole
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LegalPersonReadFunction.Arn}:${LambdaAlias}/invocations
                responses:
                  default:
                    statusCode: '200'
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,PATCH,POST,PUT'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                passthroughBehavior: when_no_match
                httpMethod: POST
                type: aws_proxy
          /person/v1/legal-persons/{person_id}/documents/{document_id}:
            get:
              consumes:
              - application/json
              parameters:
              - description: GET Document Legal Person
                schema:
                  $ref: '#/definitions/Empty'
              responses:
                '200':
                  description: Transaction approved
                  schema:
                    $ref: '#/definitions/Empty'
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
              x-amazon-apigateway-integration:
                credentials:
                  Fn::Sub: arn:aws:iam::${AWS::AccountId}:role/PersonsAPIGatewayExecutionRole
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LegalPersonReadFunction.Arn}:${LambdaAlias}/invocations
                responses:
                  default:
                    statusCode: '200'
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,PATCH,POST,PUT'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                passthroughBehavior: when_no_match
                httpMethod: POST
                type: aws_proxy
            patch:
              consumes:
              - application/json
              parameters:
              - description: PATCH Legal Person Documents
                schema:
                  $ref: '#/definitions/Empty'
              responses:
                '200':
                  description: Transaction approved
                  schema:
                    $ref: '#/definitions/Empty'
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
              x-amazon-apigateway-integration:
                credentials:
                  Fn::Sub: arn:aws:iam::${AWS::AccountId}:role/PersonsAPIGatewayExecutionRole
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LegalPersonUpsertFunction.Arn}/invocations
                responses:
                  default:
                    statusCode: '200'
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,PATCH,POST,PUT'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                passthroughBehavior: when_no_match
                httpMethod: POST
                type: aws_proxy
          /person/v1/legal-persons/{person_id}/relationships:
            get:
              consumes:
              - application/json
              parameters:
              - description: LIST Legal Person Relationships
                schema:
                  $ref: '#/definitions/Empty'
              responses:
                '200':
                  description: Transaction approved
                  schema:
                    $ref: '#/definitions/Empty'
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
              x-amazon-apigateway-integration:
                credentials:
                  Fn::Sub: arn:aws:iam::${AWS::AccountId}:role/PersonsAPIGatewayExecutionRole
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LegalPersonReadFunction.Arn}:${LambdaAlias}/invocations
                responses:
                  default:
                    statusCode: '200'
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,PATCH,POST,PUT'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                passthroughBehavior: when_no_match
                httpMethod: POST
                type: aws_proxy
          /person/v1/legal-persons/{person_id}/emails:
            post:
              consumes:
              - application/json
              parameters:
              - description: POST Emails
                schema:
                  $ref: '#/definitions/Empty'
              responses:
                '200':
                  description: Transaction approved
                  schema:
                    $ref: '#/definitions/Empty'
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
              x-amazon-apigateway-integration:
                credentials:
                  Fn::Sub: arn:aws:iam::${AWS::AccountId}:role/PersonsAPIGatewayExecutionRole
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LegalPersonUpsertFunction.Arn}/invocations
                responses:
                  default:
                    statusCode: '200'
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,PATCH,POST,PUT'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                passthroughBehavior: when_no_match
                httpMethod: POST
                type: aws_proxy
            get:
              produces:
              - application/json
              responses:
                '200':
                  description: GET Emails
                  schema:
                    $ref: '#/definitions/Empty'
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
              x-amazon-apigateway-integration:
                credentials:
                  Fn::Sub: arn:aws:iam::${AWS::AccountId}:role/PersonsAPIGatewayExecutionRole
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LegalPersonReadFunction.Arn}:${LambdaAlias}/invocations
                responses:
                  default:
                    statusCode: '200'
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,PATCH,POST,PUT'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                passthroughBehavior: when_no_match
                httpMethod: POST
                type: aws_proxy
          /person/v1/legal-persons/{person_id}/emails/{email_id}:
            get:
              consumes:
              - application/json
              parameters:
              - description: GET Email Legal Person
                schema:
                  $ref: '#/definitions/Empty'
              responses:
                '200':
                  description: Transaction approved
                  schema:
                    $ref: '#/definitions/Empty'
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
              x-amazon-apigateway-integration:
                credentials:
                  Fn::Sub: arn:aws:iam::${AWS::AccountId}:role/PersonsAPIGatewayExecutionRole
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LegalPersonReadFunction.Arn}:${LambdaAlias}/invocations
                responses:
                  default:
                    statusCode: '200'
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,PATCH,POST,PUT'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                passthroughBehavior: when_no_match
                httpMethod: POST
                type: aws_proxy
            patch:
              consumes:
              - application/json
              parameters:
              - description: PATCH Email Legal Person
                schema:
                  $ref: '#/definitions/Empty'
              responses:
                '200':
                  description: Transaction approved
                  schema:
                    $ref: '#/definitions/Empty'
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
              x-amazon-apigateway-integration:
                credentials:
                  Fn::Sub: arn:aws:iam::${AWS::AccountId}:role/PersonsAPIGatewayExecutionRole
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LegalPersonUpsertFunction.Arn}/invocations
                responses:
                  default:
                    statusCode: '200'
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,PATCH,POST,PUT'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                passthroughBehavior: when_no_match
                httpMethod: POST
                type: aws_proxy
        x-amazon-apigateway-gateway-responses:
          BAD_REQUEST_PARAMETERS:
            statusCode: 400
            responseTemplates:
              application/json: '{"error": {"id": "$context.requestId", "description":
                "Bad Request.", "code": "400"}}'
          BAD_REQUEST_BODY:
            statusCode: 400
            responseTemplates:
              application/json: '{"error": {"id": "$context.requestId", "description":
                "Bad request.", "code": "400"}}'
          MISSING_AUTHENTICATION_TOKEN:
            statusCode: 403
            responseParameters:
              gatewayresponse.header.x-dock-ErrorMessage: context.authorizer.message
              gatewayresponse.header.x-dock-RequestId: context.requestId
              gatewayresponse.header.x-dock-ErrorType: "'AuthorizationError'"
              gatewayresponse.header.x-dock-ErrorCode: context.authorizer.errorCode
            responseTemplates:
              application/json: '{"error": {"id": "$context.requestId", "description":
                "MISSING_AUTHENTICATION_TOKEN", "code": "403"}}'
          INVALID_API_KEY:
            statusCode: 403
            responseParameters:
              gatewayresponse.header.x-dock-ErrorMessage: context.authorizer.message
              gatewayresponse.header.x-dock-RequestId: context.requestId
              gatewayresponse.header.x-dock-ErrorType: "'AuthorizationError'"
              gatewayresponse.header.x-dock-ErrorCode: context.authorizer.errorCode
            responseTemplates:
              application/json: '{"error": {"id": "$context.requestId", "description":
                "INVALID_API_KEY", "code": "403"}}'
          EXPIRED_TOKEN:
            statusCode: 403
            responseParameters:
              gatewayresponse.header.x-dock-ErrorMessage: context.authorizer.message
              gatewayresponse.header.x-dock-RequestId: context.requestId
              gatewayresponse.header.x-dock-ErrorType: "'AuthorizationError'"
              gatewayresponse.header.x-dock-ErrorCode: context.authorizer.errorCode
            responseTemplates:
              application/json: '{"error": {"id": "$context.requestId", "description":
                "EXPIRED_TOKEN", "code": "403"}}'
          INVALID_SIGNATURE:
            statusCode: 403
            responseParameters:
              gatewayresponse.header.x-dock-ErrorMessage: context.authorizer.message
              gatewayresponse.header.x-dock-RequestId: context.requestId
              gatewayresponse.header.x-dock-ErrorType: "'AuthorizationError'"
              gatewayresponse.header.x-dock-ErrorCode: context.authorizer.errorCode
            responseTemplates:
              application/json: '{"error": {"id": "$context.requestId", "description":
                "INVALID_SIGNATURE", "code": "403"}}'
          ACCESS_DENIED:
            statusCode: 403
            responseParameters:
              gatewayresponse.header.x-dock-ErrorMessage: context.authorizer.message
              gatewayresponse.header.x-dock-RequestId: context.requestId
              gatewayresponse.header.x-dock-ErrorType: "'AuthorizationError'"
              gatewayresponse.header.x-dock-ErrorCode: context.authorizer.errorCode
            responseTemplates:
              application/json: '{"error": {"id": "$context.requestId", "description":
                "Forbidden.", "code": "403"}}'
          UNAUTHORIZED:
            statusCode: 401
            responseParameters:
              gatewayresponse.header.x-dock-ErrorMessage: context.authorizer.message
              gatewayresponse.header.x-dock-RequestId: context.requestId
              gatewayresponse.header.x-dock-ErrorType: "'AuthorizationError'"
              gatewayresponse.header.x-dock-ErrorCode: context.authorizer.errorCode
            responseTemplates:
              application/json: '{"error": {"id": "$context.requestId", "description":
                "Unauthorized.", "code": "401"}}'
          QUOTA_EXCEEDED:
            statusCode: 429
            responseParameters:
              gatewayresponse.header.x-dock-errormessage: "'Too many requests'"
              gatewayresponse.header.x-dock-requestid: context.requestId
              gatewayresponse.header.x-dock-errortype: "'AuthorizationError'"
              gatewayresponse.header.x-dock-errorcode: "'4000'"
            responseTemplates:
              application/json: '{"error": {"id": "$context.requestId", "description":
                "QUOTA_EXCEEDED", "code": "429"}}'
          THROTTLED:
            statusCode: 429
            responseParameters:
              gatewayresponse.header.x-dock-errormessage: "'Too many requests'"
              gatewayresponse.header.x-dock-requestid: context.requestId
              gatewayresponse.header.x-dock-errortype: "'AuthorizationError'"
              gatewayresponse.header.x-dock-errorcode: "'4000'"
            responseTemplates:
              application/json: '{"error": {"id": "$context.requestId", "description":
                "THROTTLED", "code": "429"}}'
          REQUEST_TOO_LARGE:
            statusCode: 413
            responseParameters:
              gatewayresponse.header.x-dock-errormessage: "'Request too large'"
              gatewayresponse.header.x-dock-requestid: context.requestId
              gatewayresponse.header.x-dock-errortype: "'AuthorizationError'"
              gatewayresponse.header.x-dock-errorcode: "'4000'"
            responseTemplates:
              application/json: '{"error": {"id": "$context.requestId", "description":
                "REQUEST_TOO_LARGE", "code": "413"}}'
          RESOURCE_NOT_FOUND:
            statusCode: 404
            responseTemplates:
              application/json: '{"error": {"id": "$context.requestId", "description":
                "RESOURCE_NOT_FOUND", "code": "404"}}'
          UNSUPPORTED_MEDIA_TYPE:
            statusCode: 403
            responseTemplates:
              application/json: '{"error": {"id": "$context.requestId", "description":
                "UNSUPPORTED_MEDIA_TYPE", "code": "403"}}'
          WAF_FILTERED:
            statusCode: 403
            responseTemplates:
              application/json: '{"error": {"id": "$context.requestId", "description":
                "Forbidden.", "code": "403"}}'
          API_CONFIGURATION_ERROR:
            statusCode: 500
            responseTemplates:
              application/json: '{"error": {"id": "$context.requestId", "description":
                "API_CONFIGURATION_ERROR", "code": "500"}}'
          AUTHORIZER_CONFIGURATION_ERROR:
            statusCode: 500
            responseTemplates:
              application/json: '{"error": {"id": "$context.requestId", "description":
                "AUTHORIZER_CONFIGURATION_ERROR", "code": "500"}}'
          AUTHORIZER_FAILURE:
            statusCode: 500
            responseTemplates:
              application/json: '{"error": {"id": "$context.requestId", "description":
                "AUTHORIZER_FAILURE", "code": "500"}}'
          INTEGRATION_TIMEOUT:
            statusCode: 504
            responseTemplates:
              application/json: '{"error": {"id": "$context.requestId", "description":
                "Gateway Timeout", "code": "504"}}'
          INTEGRATION_FAILURE:
            statusCode: 504
            responseTemplates:
              application/json: '{"error": {"id": "$context.requestId", "description":
                "Gateway Timeout", "code": "504"}}'
          DEFAULT_4XX:
            responseTemplates:
              application/json: '{"error": {"id": "$context.requestId", "description":
                "Invalid request.", "code": "PEOPL-7050-ERR"}}'
          DEFAULT_5XX:
            responseTemplates:
              application/json: '{"error": {"id": "$context.requestId", "description":
                "Internal Server Error.", "code": "PEOPL-7050-ERR"}}'
        x-amazon-apigateway-policy:
          Version: '2012-10-17'
          Statement:
          - Effect: Deny
            Principal: '*'
            Action: execute-api:Invoke
            Resource:
              Fn::Sub: arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:*/*/*/*
            Condition:
              StringNotEquals:
                aws:sourceVpce:
                  Fn::FindInMap:
                  - Network
                  - Ref: Env
                  - VPCEndpointId
          - Effect: Allow
            Principal: '*'
            Action: execute-api:Invoke
            Resource:
              Fn::Sub: arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:*/*/*/*
            Condition:
              StringEquals:
                aws:sourceVpce:
                  Fn::FindInMap:
                  - Network
                  - Ref: Env
                  - VPCEndpointId
        definitions:
          Empty:
            type: object
            title: Empty Schema
  PersonsDeploymentPrivate:
    Type: AWS::ApiGateway::Deployment
    Properties:
      RestApiId:
        Ref: PersonsApiGatewayPrivate
  PersonsAPIGatewayExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: PersonsAPIGatewayExecutionRole
      Path: /
      Policies:
      - PolicyName: PersonsAPIGatewayCustomPolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Action:
            - lambda:InvokeFunction
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Effect: Allow
            Resource: '*'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - apigateway.amazonaws.com
          Action: sts:AssumeRole
      Tags:
      - Key: env
        Value:
          Ref: Env
      - Key: service
        Value:
          Fn::FindInMap:
          - Tag
          - ServiceName
          - value
      - Key: stack
        Value:
          Fn::Sub: ${AWS::StackName}
      - Key: squad
        Value:
          Fn::FindInMap:
          - Tag
          - SquadName
          - value
      - Key: slack
        Value:
          Fn::FindInMap:
          - Tag
          - SquadSlack
          - value
      - Key: email
        Value:
          Fn::FindInMap:
          - Tag
          - SquadMail
          - value
      - Key: resource
        Value: iam-role
  PersonsCustomExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: PersonsCustomRole
      Path: /
      Policies:
      - PolicyName: PersonsCustomPolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Action:
            - sqs:*
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            - ssm:GetParameter
            - secretsmanager:GetSecretValue
            - ec2:CreateNetworkInterface
            - ec2:Describe*
            - ec2:DeleteNetworkInterface
            - ec2:AssignPrivateIpAddresses
            - ec2:UnassignPrivateIpAddresses
            - kms:Encrypt
            - kms:Decrypt
            Effect: Allow
            Resource: '*'
      - PolicyName: KafkaCustomPolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Sid: AllowGetSecretValueMSK
            Effect: Allow
            Action:
            - secretsmanager:GetSecretValue
            - secretsmanager:ListSecrets
            - secretsmanager:DescribeSecret
            Resource:
              Ref: KafkaClusterSecretName
          - Sid: AllowKMSDecryptMSK
            Effect: Allow
            Action:
            - kms:Decrypt
            - kms:DescribeKey
            Resource:
              Ref: KMSCrossAccountEncryptionKey
      - PolicyName: RDSCustomPolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Sid: AllowGetSecretValueRDS
            Effect: Allow
            Action:
            - secretsmanager:GetSecretValue
            - secretsmanager:ListSecrets
            - secretsmanager:DescribeSecret
            Resource:
              Ref: DatabaseSecretName
          - Sid: AllowKMSDecryptRDS
            Effect: Allow
            Action:
            - kms:Decrypt
            - kms:DescribeKey
            Resource:
              Ref: KMSCrossAccountEncryptionKey
      - PolicyName: DDAPIKeySecretAccess
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Sid: AllowGetSecretValueDD
            Effect: Allow
            Action:
            - secretsmanager:GetSecretValue
            - secretsmanager:DescribeSecret
            Resource:
              Ref: DatadogApiKeySecretArn
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action: sts:AssumeRole
      Tags:
      - Key: env
        Value:
          Ref: Env
      - Key: service
        Value:
          Fn::FindInMap:
          - Tag
          - ServiceName
          - value
      - Key: stack
        Value:
          Fn::Sub: ${AWS::StackName}
      - Key: squad
        Value:
          Fn::FindInMap:
          - Tag
          - SquadName
          - value
      - Key: slack
        Value:
          Fn::FindInMap:
          - Tag
          - SquadSlack
          - value
      - Key: email
        Value:
          Fn::FindInMap:
          - Tag
          - SquadMail
          - value
      - Key: resource
        Value: iam-role
  PersonsIntegratorSqsDLQ:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: persons-integrator-sqs-dlq
      VisibilityTimeout:
        Ref: Timeout
      MessageRetentionPeriod:
        Ref: RetentionPeriodDlq
      Tags:
      - Key: env
        Value:
          Ref: Env
      - Key: service
        Value:
          Fn::FindInMap:
          - Tag
          - ServiceName
          - value
      - Key: stack
        Value:
          Fn::Sub: ${AWS::StackName}
      - Key: squad
        Value:
          Fn::FindInMap:
          - Tag
          - SquadName
          - value
      - Key: slack
        Value:
          Fn::FindInMap:
          - Tag
          - SquadSlack
          - value
      - Key: email
        Value:
          Fn::FindInMap:
          - Tag
          - SquadMail
          - value
      - Key: resource
        Value: sqs
  PersonsIntegratorSqs:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: persons-integrator-sqs
      VisibilityTimeout:
        Ref: Timeout
      RedrivePolicy:
        deadLetterTargetArn:
          Fn::GetAtt:
          - PersonsIntegratorSqsDLQ
          - Arn
        maxReceiveCount:
          Ref: MaxReceiveCount
      Tags:
      - Key: env
        Value:
          Ref: Env
      - Key: service
        Value:
          Fn::FindInMap:
          - Tag
          - ServiceName
          - value
      - Key: stack
        Value:
          Fn::Sub: ${AWS::StackName}
      - Key: squad
        Value:
          Fn::FindInMap:
          - Tag
          - SquadName
          - value
      - Key: slack
        Value:
          Fn::FindInMap:
          - Tag
          - SquadSlack
          - value
      - Key: email
        Value:
          Fn::FindInMap:
          - Tag
          - SquadMail
          - value
      - Key: resource
        Value: iam-role
  LegalPersonReadFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: persons-legal-person-read
      AutoPublishAlias:
        Ref: LambdaAlias
      ProvisionedConcurrencyConfig:
        ProvisionedConcurrentExecutions:
          Ref: ProvisionedConcurrentNaturalPersonRead
      Layers:
      - Ref: PersonsLayer
      - Fn::Sub: arn:aws:lambda:${AWS::Region}:464622532012:layer:Datadog-Python38:85
      - Fn::Sub: arn:aws:lambda:${AWS::Region}:464622532012:layer:Datadog-Extension:51
      Handler:
        Ref: DatadogHandler
      Runtime:
        Ref: Runtime
      Role:
        Fn::GetAtt:
        - PersonsCustomExecutionRole
        - Arn
      Timeout:
        Ref: LambdaTimeout
      MemorySize:
        Ref: LambdaMemorySize
      CodeUri: s3://docktech-devopstools-bucket-sync/981861dd069773aab1f5ababa7220a08
      VpcConfig:
        SecurityGroupIds:
        - Ref: PersonsSecurityGroup
        SubnetIds:
        - Fn::FindInMap:
          - Network
          - Ref: Env
          - SubnetAZA
        - Fn::FindInMap:
          - Network
          - Ref: Env
          - SubnetAZB
        - Fn::FindInMap:
          - Network
          - Ref: Env
          - SubnetAZC
      Environment:
        Variables:
          REGION:
            Fn::Sub: ${AWS::Region}
          DATABASE_SECRET_NAME:
            Ref: DatabaseSecretName
          DATABASE_SCHEMA_NAME:
            Ref: DatabaseSchemaName
          RDS_PROXY_HOST:
            Ref: RDSProxyHost
          REDIS_URL:
            Ref: RedisUrl
          KAFKA_CLUSTER_SECRET_NAME:
            Ref: KafkaClusterSecretName
          KAFKA_TOPIC_NAME_REDHORN_PEOPLE:
            Fn::Sub: kfk.${Env}.people
          SQS_PERSONS_INTEGRATOR_URL:
            Ref: PersonsIntegratorSqs
          AWSRegion:
            Ref: AWSRegion
          DD_LAMBDA_HANDLER: handler.lambda_handler
          DD_TRACE_ENABLED:
            Ref: DatadogTracerEnabled
          DD_SITE:
            Ref: DatadogSiteUrl
          DD_API_KEY_SECRET_ARN:
            Fn::If:
            - enableDatadog
            - Ref: DatadogApiKeySecretArn
            - ''
          DD_ENV:
            Ref: Env
          DD_VERSION:
            Ref: Versao
          DD_SERVICE: persons
      Events:
        LegalPersonGET:
          Type: Api
          Properties:
            Path: /v1/legal-persons/{person_id}
            Method: get
            RestApiId:
              Ref: PersonsApiGatewayPrivate
        LegalPersonLIST:
          Type: Api
          Properties:
            Path: /v1/legal-persons/
            Method: get
            RestApiId:
              Ref: PersonsApiGatewayPrivate
        LegalPersonRelationshipsLIST:
          Type: Api
          Properties:
            Path: /v1/legal-persons/{person_id}/relationships
            Method: get
            RestApiId:
              Ref: PersonsApiGatewayPrivate
        LegalPersonAddressesLIST:
          Type: Api
          Properties:
            Path: /v1/legal-persons/{person_id}/addresses
            Method: get
            RestApiId:
              Ref: PersonsApiGatewayPrivate
        LegalPersonAddressGET:
          Type: Api
          Properties:
            Path: /v1/legal-persons/{person_id}/addresses/{address_id}
            Method: get
            RestApiId:
              Ref: PersonsApiGatewayPrivate
        LegalPersonPhonesLIST:
          Type: Api
          Properties:
            Path: /v1/legal-persons/{person_id}/phones
            Method: get
            RestApiId:
              Ref: PersonsApiGatewayPrivate
        LegalPersonPhonesGET:
          Type: Api
          Properties:
            Path: /v1/legal-persons/{person_id}/phones/{phone_id}
            Method: get
            RestApiId:
              Ref: PersonsApiGatewayPrivate
        LegalPersonDocumentsLIST:
          Type: Api
          Properties:
            Path: /v1/legal-persons/{person_id}/documents
            Method: get
            RestApiId:
              Ref: PersonsApiGatewayPrivate
        LegalPersonDocumentsGet:
          Type: Api
          Properties:
            Path: /v1/legal-persons/{person_id}/documents/{document_id}
            Method: get
            RestApiId:
              Ref: PersonsApiGatewayPrivate
        LegalPersonEmailsLIST:
          Type: Api
          Properties:
            Path: /v1/legal-persons/{person_id}/emails
            Method: get
            RestApiId:
              Ref: PersonsApiGatewayPrivate
        LegalPersonEmailsGET:
          Type: Api
          Properties:
            Path: /v1/legal-persons/{person_id}/emails/{email_id}
            Method: get
            RestApiId:
              Ref: PersonsApiGatewayPrivate
      Tags:
        env:
          Ref: Env
        service:
          Fn::FindInMap:
          - Tag
          - ServiceName
          - value
        stack:
          Fn::Sub: ${AWS::StackName}
        squad:
          Fn::FindInMap:
          - Tag
          - SquadName
          - value
        slack:
          Fn::FindInMap:
          - Tag
          - SquadSlack
          - value
        email:
          Fn::FindInMap:
          - Tag
          - SquadMail
          - value
        resource: lambda
  LegalPersonUpsertFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: persons-legal-person-upsert
      Layers:
      - Ref: PersonsLayer
      - Fn::Sub: arn:aws:lambda:${AWS::Region}:464622532012:layer:Datadog-Python38:85
      - Fn::Sub: arn:aws:lambda:${AWS::Region}:464622532012:layer:Datadog-Extension:51
      Handler:
        Ref: DatadogHandler
      Runtime:
        Ref: Runtime
      Role:
        Fn::GetAtt:
        - PersonsCustomExecutionRole
        - Arn
      Timeout:
        Ref: LambdaTimeout
      MemorySize:
        Ref: LambdaMemorySize
      CodeUri: s3://docktech-devopstools-bucket-sync/37ecda741c35eeee62789ba08275a022
      VpcConfig:
        SecurityGroupIds:
        - Ref: PersonsSecurityGroup
        SubnetIds:
        - Fn::FindInMap:
          - Network
          - Ref: Env
          - SubnetAZA
        - Fn::FindInMap:
          - Network
          - Ref: Env
          - SubnetAZB
        - Fn::FindInMap:
          - Network
          - Ref: Env
          - SubnetAZC
      Environment:
        Variables:
          REGION:
            Fn::Sub: ${AWS::Region}
          DATABASE_SECRET_NAME:
            Ref: DatabaseSecretName
          DATABASE_SCHEMA_NAME:
            Ref: DatabaseSchemaName
          RDS_PROXY_HOST:
            Ref: RDSProxyHost
          REDIS_URL:
            Ref: RedisUrl
          KAFKA_CLUSTER_SECRET_NAME:
            Ref: KafkaClusterSecretName
          KAFKA_TOPIC_NAME_REDHORN_PEOPLE:
            Fn::Sub: kfk.${Env}.people
          SQS_PERSONS_INTEGRATOR_URL:
            Ref: PersonsIntegratorSqs
          AWSRegion:
            Ref: AWSRegion
          DD_LAMBDA_HANDLER: handler.lambda_handler
          DD_TRACE_ENABLED:
            Ref: DatadogTracerEnabled
          DD_SITE:
            Ref: DatadogSiteUrl
          DD_API_KEY_SECRET_ARN:
            Fn::If:
            - enableDatadog
            - Ref: DatadogApiKeySecretArn
            - ''
          DD_ENV:
            Ref: Env
          DD_VERSION:
            Ref: Versao
          DD_SERVICE: persons
      Events:
        LegalPersonPOST:
          Type: Api
          Properties:
            Path: /v1/legal-persons
            Method: post
            RestApiId:
              Ref: PersonsApiGatewayPrivate
        LegalPersonPATCH:
          Type: Api
          Properties:
            Path: /v1/legal-persons/{person_id}
            Method: patch
            RestApiId:
              Ref: PersonsApiGatewayPrivate
        LegalPersonAddressesPOST:
          Type: Api
          Properties:
            Path: /v1/legal-persons/{person_id}/addresses
            Method: post
            RestApiId:
              Ref: PersonsApiGatewayPrivate
        LegalPersonAddressesPATCH:
          Type: Api
          Properties:
            Path: /v1/legal-persons/{person_id}/addresses/{address_id}
            Method: patch
            RestApiId:
              Ref: PersonsApiGatewayPrivate
        LegalPersonPhonesPOST:
          Type: Api
          Properties:
            Path: /v1/legal-persons/{person_id}/phones
            Method: post
            RestApiId:
              Ref: PersonsApiGatewayPrivate
        LegalPersonPhonesPATCH:
          Type: Api
          Properties:
            Path: /v1/legal-persons/{person_id}/phones/{phone_id}
            Method: patch
            RestApiId:
              Ref: PersonsApiGatewayPrivate
      Tags:
        env:
          Ref: Env
        service:
          Fn::FindInMap:
          - Tag
          - ServiceName
          - value
        stack:
          Fn::Sub: ${AWS::StackName}
        squad:
          Fn::FindInMap:
          - Tag
          - SquadName
          - value
        slack:
          Fn::FindInMap:
          - Tag
          - SquadSlack
          - value
        email:
          Fn::FindInMap:
          - Tag
          - SquadMail
          - value
        resource: lambda
  NaturalPersonUpsertFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: persons-natural-person-upsert
      Layers:
      - Ref: PersonsLayer
      - Fn::Sub: arn:aws:lambda:${AWS::Region}:464622532012:layer:Datadog-Python38:85
      - Fn::Sub: arn:aws:lambda:${AWS::Region}:464622532012:layer:Datadog-Extension:51
      Handler:
        Ref: DatadogHandler
      Runtime:
        Ref: Runtime
      Role:
        Fn::GetAtt:
        - PersonsCustomExecutionRole
        - Arn
      Timeout:
        Ref: LambdaTimeout
      MemorySize:
        Ref: LambdaMemorySize
      CodeUri: s3://docktech-devopstools-bucket-sync/187484ba58ee8e7853b5725e00a6dded
      VpcConfig:
        SecurityGroupIds:
        - Ref: PersonsSecurityGroup
        SubnetIds:
        - Fn::FindInMap:
          - Network
          - Ref: Env
          - SubnetAZA
        - Fn::FindInMap:
          - Network
          - Ref: Env
          - SubnetAZB
        - Fn::FindInMap:
          - Network
          - Ref: Env
          - SubnetAZC
      Environment:
        Variables:
          REGION:
            Fn::Sub: ${AWS::Region}
          DATABASE_SECRET_NAME:
            Ref: DatabaseSecretName
          DATABASE_SCHEMA_NAME:
            Ref: DatabaseSchemaName
          RDS_PROXY_HOST:
            Ref: RDSProxyHost
          REDIS_URL:
            Ref: RedisUrl
          KAFKA_CLUSTER_SECRET_NAME:
            Ref: KafkaClusterSecretName
          KAFKA_TOPIC_NAME_REDHORN_PEOPLE:
            Fn::Sub: kfk.${Env}.people
          SQS_PERSONS_INTEGRATOR_URL:
            Ref: PersonsIntegratorSqs
          AWSRegion:
            Ref: AWSRegion
          DD_LAMBDA_HANDLER: handler.lambda_handler
          DD_TRACE_ENABLED:
            Ref: DatadogTracerEnabled
          DD_SITE:
            Ref: DatadogSiteUrl
          DD_API_KEY_SECRET_ARN:
            Fn::If:
            - enableDatadog
            - Ref: DatadogApiKeySecretArn
            - ''
          DD_ENV:
            Ref: Env
          DD_VERSION:
            Ref: Versao
          DD_SERVICE: persons
      Events:
        NaturalPersonPOST:
          Type: Api
          Properties:
            Path: /v1/natural-persons
            Method: post
            RestApiId:
              Ref: PersonsApiGatewayPrivate
        NaturalPersonPATCH:
          Type: Api
          Properties:
            Path: /v1/natural-persons/{person_id}
            Method: patch
            RestApiId:
              Ref: PersonsApiGatewayPrivate
        NaturalPhonesPOST:
          Type: Api
          Properties:
            Path: /v1/natural-persons/{person_id}/phones
            Method: post
            RestApiId:
              Ref: PersonsApiGatewayPrivate
        NaturalPhonesPatch:
          Type: Api
          Properties:
            Path: /v1/natural-persons/{person_id}/phones/{phone_id}
            Method: patch
            RestApiId:
              Ref: PersonsApiGatewayPrivate
        NaturalAddressesPOST:
          Type: Api
          Properties:
            Path: /v1/natural-persons/{person_id}/addresses
            Method: post
            RestApiId:
              Ref: PersonsApiGatewayPrivate
        NaturalAddressesPatch:
          Type: Api
          Properties:
            Path: /v1/natural-persons/{person_id}/addresses/{address_id}
            Method: patch
            RestApiId:
              Ref: PersonsApiGatewayPrivate
        NaturalDocumentsPOST:
          Type: Api
          Properties:
            Path: /v1/natural-persons/{person_id}/documents
            Method: post
            RestApiId:
              Ref: PersonsApiGatewayPrivate
        NaturalDocumentsLIST:
          Type: Api
          Properties:
            Path: /v1/natural-persons/{person_id}/documents
            Method: get
            RestApiId:
              Ref: PersonsApiGatewayPrivate
        NaturalDocumentsPATCH:
          Type: Api
          Properties:
            Path: /v1/natural-persons/{person_id}/documents/{document_id}
            Method: patch
            RestApiId:
              Ref: PersonsApiGatewayPrivate
        NaturalRelationshipsLIST:
          Type: Api
          Properties:
            Path: /v1/natural-persons/{person_id}/relationships
            Method: get
            RestApiId:
              Ref: PersonsApiGatewayPrivate
        NaturalRelationshipsPOST:
          Type: Api
          Properties:
            Path: /v1/relationships
            Method: post
            RestApiId:
              Ref: PersonsApiGatewayPrivate
        NaturalEmailsPOST:
          Type: Api
          Properties:
            Path: /v1/natural-persons/{person_id}/emails
            Method: post
            RestApiId:
              Ref: PersonsApiGatewayPrivate
      Tags:
        env:
          Ref: Env
        service:
          Fn::FindInMap:
          - Tag
          - ServiceName
          - value
        stack:
          Fn::Sub: ${AWS::StackName}
        squad:
          Fn::FindInMap:
          - Tag
          - SquadName
          - value
        slack:
          Fn::FindInMap:
          - Tag
          - SquadSlack
          - value
        email:
          Fn::FindInMap:
          - Tag
          - SquadMail
          - value
        resource: lambda
  NaturalPersonReadFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: persons-natural-person-read
      AutoPublishAlias:
        Ref: LambdaAlias
      ProvisionedConcurrencyConfig:
        ProvisionedConcurrentExecutions:
          Ref: ProvisionedConcurrentNaturalPersonRead
      Layers:
      - Ref: PersonsLayer
      - Fn::Sub: arn:aws:lambda:${AWS::Region}:464622532012:layer:Datadog-Python38:85
      - Fn::Sub: arn:aws:lambda:${AWS::Region}:464622532012:layer:Datadog-Extension:51
      Handler:
        Ref: DatadogHandler
      Runtime:
        Ref: Runtime
      Role:
        Fn::GetAtt:
        - PersonsCustomExecutionRole
        - Arn
      Timeout:
        Ref: LambdaTimeout
      MemorySize:
        Ref: LambdaMemorySize
      CodeUri: s3://docktech-devopstools-bucket-sync/a87987e7c352c71d41679348932223a1
      VpcConfig:
        SecurityGroupIds:
        - Ref: PersonsSecurityGroup
        SubnetIds:
        - Fn::FindInMap:
          - Network
          - Ref: Env
          - SubnetAZA
        - Fn::FindInMap:
          - Network
          - Ref: Env
          - SubnetAZB
        - Fn::FindInMap:
          - Network
          - Ref: Env
          - SubnetAZC
      Environment:
        Variables:
          REGION:
            Fn::Sub: ${AWS::Region}
          DATABASE_SECRET_NAME:
            Ref: DatabaseSecretName
          DATABASE_SCHEMA_NAME:
            Ref: DatabaseSchemaName
          RDS_PROXY_HOST:
            Ref: RDSProxyHost
          REDIS_URL:
            Ref: RedisUrl
          KAFKA_CLUSTER_SECRET_NAME:
            Ref: KafkaClusterSecretName
          KAFKA_TOPIC_NAME_REDHORN_PEOPLE:
            Fn::Sub: kfk.${Env}.people
          SQS_PERSONS_INTEGRATOR_URL:
            Ref: PersonsIntegratorSqs
          AWSRegion:
            Ref: AWSRegion
          DD_LAMBDA_HANDLER: handler.lambda_handler
          DD_TRACE_ENABLED:
            Ref: DatadogTracerEnabled
          DD_SITE:
            Ref: DatadogSiteUrl
          DD_API_KEY_SECRET_ARN:
            Fn::If:
            - enableDatadog
            - Ref: DatadogApiKeySecretArn
            - ''
          DD_ENV:
            Ref: Env
          DD_VERSION:
            Ref: Versao
          DD_SERVICE: persons
      Events:
        NaturalPersonGET:
          Type: Api
          Properties:
            Path: /v1/natural-persons/{person_id}
            Method: get
            RestApiId:
              Ref: PersonsApiGatewayPrivate
        NaturalPersonGETList:
          Type: Api
          Properties:
            Path: /v1/natural-persons
            Method: get
            RestApiId:
              Ref: PersonsApiGatewayPrivate
        NaturalPhonesLIST:
          Type: Api
          Properties:
            Path: /v1/natural-persons/{person_id}/phones
            Method: get
            RestApiId:
              Ref: PersonsApiGatewayPrivate
        NaturalPersonPhonesGET:
          Type: Api
          Properties:
            Path: /v1/natural-persons/{person_id}/phones/{phone_id}
            Method: get
            RestApiId:
              Ref: PersonsApiGatewayPrivate
        NaturalPersonAddressesLIST:
          Type: Api
          Properties:
            Path: /v1/natural-persons/{person_id}/addresses
            Method: get
            RestApiId:
              Ref: PersonsApiGatewayPrivate
        NaturalPersonAddressGET:
          Type: Api
          Properties:
            Path: /v1/natural-persons/{person_id}/addresses/{address_id}
            Method: get
            RestApiId:
              Ref: PersonsApiGatewayPrivate
        NaturalPersonEmailsLIST:
          Type: Api
          Properties:
            Path: /v1/natural-persons/{person_id}/emails
            Method: get
            RestApiId:
              Ref: PersonsApiGatewayPrivate
        NaturalPersonEmailsGET:
          Type: Api
          Properties:
            Path: /v1/natural-persons/{person_id}/emails/{email_id}
            Method: get
            RestApiId:
              Ref: PersonsApiGatewayPrivate
        NaturalPersonDocumentGET:
          Type: Api
          Properties:
            Path: /v1/natural-persons/{person_id}/documents/{document_id}
            Method: get
            RestApiId:
              Ref: PersonsApiGatewayPrivate
      Tags:
        env:
          Ref: Env
        service:
          Fn::FindInMap:
          - Tag
          - ServiceName
          - value
        stack:
          Fn::Sub: ${AWS::StackName}
        squad:
          Fn::FindInMap:
          - Tag
          - SquadName
          - value
        slack:
          Fn::FindInMap:
          - Tag
          - SquadSlack
          - value
        email:
          Fn::FindInMap:
          - Tag
          - SquadMail
          - value
        resource: lambda
  PersonsSetupTypeFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: persons-setup-type
      Layers:
      - Ref: PersonsLayer
      - Fn::Sub: arn:aws:lambda:${AWS::Region}:464622532012:layer:Datadog-Python38:85
      - Fn::Sub: arn:aws:lambda:${AWS::Region}:464622532012:layer:Datadog-Extension:51
      Handler:
        Ref: DatadogHandler
      Runtime:
        Ref: Runtime
      Role:
        Fn::GetAtt:
        - PersonsCustomExecutionRole
        - Arn
      Timeout:
        Ref: LambdaTimeout
      MemorySize:
        Ref: LambdaMemorySize
      CodeUri: s3://docktech-devopstools-bucket-sync/4fe1706d36a7633dbd7d4d3376b94226
      VpcConfig:
        SecurityGroupIds:
        - Ref: PersonsSecurityGroup
        SubnetIds:
        - Fn::FindInMap:
          - Network
          - Ref: Env
          - SubnetAZA
        - Fn::FindInMap:
          - Network
          - Ref: Env
          - SubnetAZB
        - Fn::FindInMap:
          - Network
          - Ref: Env
          - SubnetAZC
      Environment:
        Variables:
          REGION:
            Fn::Sub: ${AWS::Region}
          DATABASE_SECRET_NAME:
            Ref: DatabaseSecretName
          DATABASE_SCHEMA_NAME:
            Ref: DatabaseSchemaName
          RDS_PROXY_HOST:
            Ref: RDSProxyHost
          REDIS_URL:
            Ref: RedisUrl
          KAFKA_CLUSTER_SECRET_NAME:
            Ref: KafkaClusterSecretName
          KAFKA_TOPIC_NAME_REDHORN_PEOPLE:
            Fn::Sub: kfk.${Env}.people
          SQS_PERSONS_INTEGRATOR_URL:
            Ref: PersonsIntegratorSqs
          AWSRegion:
            Ref: AWSRegion
          DD_LAMBDA_HANDLER: handler.lambda_handler
          DD_TRACE_ENABLED:
            Ref: DatadogTracerEnabled
          DD_SITE:
            Ref: DatadogSiteUrl
          DD_API_KEY_SECRET_ARN:
            Fn::If:
            - enableDatadog
            - Ref: DatadogApiKeySecretArn
            - ''
          DD_ENV:
            Ref: Env
          DD_VERSION:
            Ref: Versao
          DD_SERVICE: persons
      Events:
        PersonsSetupTypePOST:
          Type: Api
          Properties:
            Path: /v1/setup/types
            Method: post
            RestApiId:
              Ref: PersonsApiGatewayPrivate
        PersonsSetupTypeLIST:
          Type: Api
          Properties:
            Path: /v1/setup/types
            Method: get
            RestApiId:
              Ref: PersonsApiGatewayPrivate
        PersonsSetupTypePATCH:
          Type: Api
          Properties:
            Path: /v1/setup/types/{id}
            Method: patch
            RestApiId:
              Ref: PersonsApiGatewayPrivate
        PersonsSetupPersonGET:
          Type: Api
          Properties:
            Path: /v1/person/{person_id}
            Method: get
            RestApiId:
              Ref: PersonsApiGatewayPrivate
        PersonsSetupTypeGet:
          Type: Api
          Properties:
            Path: /v1/setup/types/{id}
            Method: get
            RestApiId:
              Ref: PersonsApiGatewayPrivate
      Tags:
        env:
          Ref: Env
        service:
          Fn::FindInMap:
          - Tag
          - ServiceName
          - value
        stack:
          Fn::Sub: ${AWS::StackName}
        squad:
          Fn::FindInMap:
          - Tag
          - SquadName
          - value
        slack:
          Fn::FindInMap:
          - Tag
          - SquadSlack
          - value
        email:
          Fn::FindInMap:
          - Tag
          - SquadMail
          - value
        resource: lambda
  PersonsResilienceFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: persons-resilience
      Layers:
      - Ref: PersonsLayer
      - Fn::Sub: arn:aws:lambda:${AWS::Region}:464622532012:layer:Datadog-Python38:85
      - Fn::Sub: arn:aws:lambda:${AWS::Region}:464622532012:layer:Datadog-Extension:51
      Handler:
        Ref: DatadogHandler
      Runtime:
        Ref: Runtime
      Role:
        Fn::GetAtt:
        - PersonsCustomExecutionRole
        - Arn
      Timeout:
        Ref: LambdaTimeout
      MemorySize:
        Ref: LambdaMemorySize
      CodeUri: s3://docktech-devopstools-bucket-sync/a29d98c59e9a0d236f3ed13109adc51e
      VpcConfig:
        SecurityGroupIds:
        - Ref: PersonsSecurityGroup
        SubnetIds:
        - Fn::FindInMap:
          - Network
          - Ref: Env
          - SubnetAZA
        - Fn::FindInMap:
          - Network
          - Ref: Env
          - SubnetAZB
        - Fn::FindInMap:
          - Network
          - Ref: Env
          - SubnetAZC
      Environment:
        Variables:
          REGION:
            Fn::Sub: ${AWS::Region}
          DATABASE_SECRET_NAME:
            Ref: DatabaseSecretName
          DATABASE_SCHEMA_NAME:
            Ref: DatabaseSchemaName
          RDS_PROXY_HOST:
            Ref: RDSProxyHost
          REDIS_URL:
            Ref: RedisUrl
          KAFKA_CLUSTER_SECRET_NAME:
            Ref: KafkaClusterSecretName
          KAFKA_TOPIC_NAME_REDHORN_PEOPLE:
            Fn::Sub: kfk.${Env}.people
          SQS_PERSONS_INTEGRATOR_URL:
            Ref: PersonsIntegratorSqs
          AWSRegion:
            Ref: AWSRegion
          DD_LAMBDA_HANDLER: handler.worker
          DD_TRACE_ENABLED:
            Ref: DatadogTracerEnabled
          DD_SITE:
            Ref: DatadogSiteUrl
          DD_API_KEY_SECRET_ARN:
            Fn::If:
            - enableDatadog
            - Ref: DatadogApiKeySecretArn
            - ''
          DD_ENV:
            Ref: Env
          DD_VERSION:
            Ref: Versao
          DD_SERVICE: persons
      Tags:
        env:
          Ref: Env
        service:
          Fn::FindInMap:
          - Tag
          - ServiceName
          - value
        stack:
          Fn::Sub: ${AWS::StackName}
        squad:
          Fn::FindInMap:
          - Tag
          - SquadName
          - value
        slack:
          Fn::FindInMap:
          - Tag
          - SquadSlack
          - value
        email:
          Fn::FindInMap:
          - Tag
          - SquadMail
          - value
        resource: lambda
  IntegratorEventSource:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      BatchSize: 1
      Enabled: true
      EventSourceArn:
        Fn::GetAtt:
        - PersonsIntegratorSqs
        - Arn
      FunctionName:
        Fn::GetAtt:
        - PersonsResilienceFunction
        - Arn
  PersonsLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      CompatibleRuntimes:
      - python3.8
      ContentUri: s3://docktech-devopstools-bucket-sync/27d50eb7e1686e7120a6e96e45e59bea
      Description: Persons Layer Libraries
      LayerName: persons-layer
      LicenseInfo: Proprietary
  PersonsSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId:
        Fn::FindInMap:
        - Network
        - Ref: Env
        - VpcId
      GroupDescription: Security group for Lambda functions - Persons API
      Tags:
      - Key: env
        Value:
          Ref: Env
      - Key: service
        Value:
          Fn::FindInMap:
          - Tag
          - ServiceName
          - value
      - Key: stack
        Value:
          Fn::Sub: ${AWS::StackName}
      - Key: squad
        Value:
          Fn::FindInMap:
          - Tag
          - SquadName
          - value
      - Key: slack
        Value:
          Fn::FindInMap:
          - Tag
          - SquadSlack
          - value
      - Key: email
        Value:
          Fn::FindInMap:
          - Tag
          - SquadMail
          - value
      - Key: resource
        Value: security-group
  PersonsSecurityIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId:
        Fn::GetAtt:
        - PersonsSecurityGroup
        - GroupId
      Description: Allow traffic only self reference SG
      IpProtocol: -1
      SourceSecurityGroupId:
        Fn::GetAtt:
        - PersonsSecurityGroup
        - GroupId
Outputs:
  PersonsSetupGetPrivateURL:
    Value:
      Fn::Join:
      - ''
      - - https://
        - Ref: VPCEndpointUrl
        - /Live/person/v1/setup/types
    Export:
      Name: PersonsSetupGetPrivateURL
  PersonsSetupGetPrivateID:
    Value:
      Ref: PersonsApiGatewayPrivate
    Export:
      Name: PersonsSetupGetPrivateID
