AWSTemplateFormatVersion: '2010-09-09'
Transform:
- AWS::Serverless-2016-10-31
Description: Apigateway Private Lambda Integration v3.4 - 15/05/2025

Parameters:
  Versao:
    Type: String
    Default: 3.0
  Env:
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - hml
      - prd
  LambdaFunctionArn:
    Type: String
    Description: Lambda ARN for invocation
    Default: arn:aws:lambda:us-east-2:908671954593:function:my-lambda-test
  PrivateApiLogFormat:
    Type: String
    Default: '{"requestId": "$context.requestId", "sourceIP": "$context.identity.sourceIp",
      "userAgent": "$context.identity.userAgent", "WAFresponse": "$context.wafResponseCode",
      "httpMethod": "$context.httpMethod", "path": "$context.path", "respTime":$context.integrationLatency,
      "responseCode": "$context.status", "integRespCode": "$context.integrationStatus",
      "reqTime":$context.requestTimeEpoch, "resourcePath": "$context.resourcePath",
      "apiId": "$context.apiId"}'
  VPCEndpointId:
    Type: String
    Default: vpce-0cc0b1181b93539f0  
  ApiPrivateName:
    Type: String
    Default: go-lambda-pv
  ApiPrivateLogGroupName:
    Type: String
    Description: Name of API Gateway Log Group
    Default: /dock/apigateway/go-lambda-pv
  WafaclArn:
    Type: String
    Description: Association WAF in API ApiGateway
    Default: arn:aws:wafv2:us-east-2:908671954593:regional/webacl/FMManagedWebACLV2-acl-basic-1663942040591/0c9a45b3-1c87-4cd9-86a9-e50fb1914e53
  Application:
    Type: String
    Default: go-lambda-pv
  Owner:
    Type: String
    Default: architecture
  Service:
    Type: String
    Default: go-lambda-pv
  Squad:
    Type: String
    Default: architecture

Conditions:
  isPrd: !Equals [!Ref Env, prd]
  isPrdOrQa:
    'Fn::Or':
      - 'Fn::Equals':
          - !Ref Env
          - prd
      - 'Fn::Equals':
          - !Ref Env
          - qa

Mappings:
  Network:
    dev:
      Vpc: vpc-0df31a6e2d113d8b7
    hml:
      Vpc: vpc-053bf362926211174
    prd:
      Vpc: vpc-0fa3325d4843786ca,vpc-028b0a127e9669159
  ApigwMap:
    Lambda:
      EndpointURL: go-lambda.architecture.caradhras.io

Resources:
  ApiPrivateLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName:
        Ref: ApiPrivateLogGroupName
      RetentionInDays: 7
      Tags:
      - Key: application
        Value:
          Ref: Application
      - Key: env
        Value:
          Ref: Env
      - Key: owner
        Value:
          Ref: Owner
      - Key: resource
        Value: log-group
      - Key: service
        Value:
          Ref: Service
      - Key: squad
        Value:
          Ref: Squad
      - Key: stack
        Value:
          Fn::Sub: ${AWS::StackName}
  
  ApiPrivateGateway:
    Type: AWS::Serverless::Api
    Properties:
      BinaryMediaTypes:
        - multipart/form-data  # Enable binary media type
      AccessLogSetting:
        DestinationArn:
          Fn::GetAtt:
          - ApiPrivateLogGroup
          - Arn
        Format:
          Ref: PrivateApiLogFormat
      AlwaysDeploy: true
      DefinitionBody:
        swagger: '2.0'
        info:
          title: go-lambda-pv
        tags:
        - name: go-lambda-pv
          description: go-lambda-pv
        schemes:
        - https
        paths:
          /{proxy+}:
            get:
              produces:
              - application/json
              responses:
                '200':
                  description: 200 response
                  schema:
                    $ref: '#/definitions/Empty'
              x-amazon-apigateway-integration:
                type: aws_proxy
                httpMethod: POST           
                uri: 
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaFunctionArn}/invocations
                passthroughBehavior: when_no_match
                requestParameters:
                  integration.request.path.proxy: method.request.path.proxy
                  integration.request.header.X-Request-ID: context.requestId
                  integration.request.header.client-id: context.authorizer.tenant_id
                  integration.request.header.X-Forwarded-For: context.identity.sourceIp      
                  integration.request.header.jwt-id: context.authorizer.jwt_id
            post:
              produces:
              - application/json
              responses:
                '200':
                  description: 200 response
                  schema:
                    $ref: '#/definitions/Empty'
              x-amazon-apigateway-integration:
                type: aws_proxy
                httpMethod: POST           
                uri: 
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaFunctionArn}/invocations
                passthroughBehavior: when_no_match
                requestParameters:
                  integration.request.path.proxy: method.request.path.proxy
                  integration.request.header.X-Request-ID: context.requestId
                  integration.request.header.client-id: context.authorizer.tenant_id
                  integration.request.header.X-Forwarded-For: context.identity.sourceIp      
                  integration.request.header.jwt-id: context.authorizer.jwt_id
            patch:
              produces:
              - application/json
              responses:
                '200':
                  description: 200 response
                  schema:
                    $ref: '#/definitions/Empty'
              x-amazon-apigateway-integration:
                type: aws_proxy
                httpMethod: POST           
                uri: 
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaFunctionArn}/invocations
                passthroughBehavior: when_no_match
                requestParameters:
                  integration.request.path.proxy: method.request.path.proxy
                  integration.request.header.X-Request-ID: context.requestId
                  integration.request.header.client-id: context.authorizer.tenant_id
                  integration.request.header.X-Forwarded-For: context.identity.sourceIp      
                  integration.request.header.jwt-id: context.authorizer.jwt_id
        x-amazon-apigateway-policy:
          Version: "2012-10-17"
          Statement:
            - Effect: "Deny"
              Principal: "*"
              Action: "execute-api:Invoke"
              Resource: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:*/*/*/*
              Condition:
                StringNotEquals:
                  aws:sourceVpc: !If [ isPrdOrQa, !Split [",", !FindInMap [ Network, !Ref Env, Vpc] ], !FindInMap [ Network, !Ref Env, Vpc]]
            - Effect: "Allow"
              Principal: "*"
              Action: "execute-api:Invoke"
              Resource: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:*/*/*/*
              Condition:
                StringEquals:
                  aws:sourceVpc: !If [ isPrdOrQa, !Split [",", !FindInMap [ Network, !Ref Env, Vpc] ], !FindInMap [ Network, !Ref Env, Vpc]]
        definitions:
          Empty:
            type: object
            title: Empty Schema
        x-amazon-apigateway-gateway-responses:
          UNAUTHORIZED:
            statusCode: 401
            responseTemplates:
              application/json: '{"error": { "id": "$context.requestId", "description":
                "Unauthorized", "code": "401"}}'
          ACCESS_DENIED:
            statusCode: 403
            responseTemplates:
              application/json: '{"error": { "id": "$context.requestId", "description":
                "Forbidden", "code": "403"}}'
          DEFAULT_4XX:
            statusCode: 404
            responseTemplates:
              application/json: '{"error": { "id": "$context.requestId", "description":
                "Resource not found", "code": "404"}}'
          DEFAULT_5XX:
            statusCode: 500
            responseTemplates:
              application/json: '{"error": { "id": "$context.requestId", "description":
                "Internal Server Error", "code": "500"}}'
          WAF_FILTERED:
            statusCode: 403
            responseTemplates:
              application/json: '{"error": { "id": "$context.requestId", "description":
                "Forbidden", "code": "403"}}'
          THROTTLED:
            statusCode: 429
            responseTemplates:
              application/json: '{"error": { "id": "$context.requestId", "description":
                "Too many requests", "code": "429"}}'
      Description: API Private Lambda Integration
      DisableExecuteApiEndpoint: true
      EndpointConfiguration:
        Type: PRIVATE
        VPCEndpointIds:
          - !Ref VPCEndpointId
      MethodSettings:
      - ResourcePath: /*
        HttpMethod: '*'
        MetricsEnabled: true
        DataTraceEnabled: true
        LoggingLevel: INFO
      StageName: live
      Tags:
        application:
          Ref: Application
        env:
          Ref: Env
        owner:
          Ref: Owner
        resource: api-gateway
        service:
          Ref: Service
        squad:
          Ref: Squad
        stack:
          Fn::Sub: ${AWS::StackName}
      TracingEnabled: true # xray enabled
      Variables:
        apiName:
          Ref: ApiPrivateName

  ApiInvokeLambdaPermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      FunctionName: !Ref LambdaFunctionArn
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiPrivateGateway}/*/*/*"

  WafAssociation:
    Type: AWS::WAFv2::WebACLAssociation
    Properties:
      ResourceArn:
        Fn::Sub: arn:aws:apigateway:${AWS::Region}::/restapis/${ApiPrivateGateway}/stages/${ApiPrivateGateway.Stage}
      WebACLArn:
        Ref: WafaclArn